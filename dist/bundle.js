(()=>{"use strict";var t="http://localhost:3000",n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},n(t,e)};function e(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}function r(t,n){var e,r,i,o,c={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(e)throw new TypeError("Generator is already executing.");for(;c;)try{if(e=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return c.label++,{value:o[1],done:!1};case 5:c.label++,r=o[1],o=[0];continue;case 7:o=c.ops.pop(),c.trys.pop();continue;default:if(!((i=(i=c.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){c=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){c.label=o[1];break}if(6===o[0]&&c.label<i[1]){c.label=i[1],i=o;break}if(i&&c.label<i[2]){c.label=i[2],c.ops.push(o);break}i[2]&&c.ops.pop(),c.trys.pop();continue}o=n.call(t,c)}catch(t){o=[6,t],r=0}finally{e=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}}function i(t){var n="function"==typeof Symbol&&Symbol.iterator,e=n&&t[n],r=0;if(e)return e.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(t,n){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var r,i,o=e.call(t),c=[];try{for(;(void 0===n||n-- >0)&&!(r=o.next()).done;)c.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(e=o.return)&&e.call(o)}finally{if(i)throw i.error}}return c}function c(t,n,e){if(e||2===arguments.length)for(var r,i=0,o=n.length;i<o;i++)!r&&i in n||(r||(r=Array.prototype.slice.call(n,0,i)),r[i]=n[i]);return t.concat(r||Array.prototype.slice.call(n))}function u(t){return this instanceof u?(this.v=t,this):new u(t)}function a(t,n,e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=e.apply(t,n||[]),o=[];return r={},c("next"),c("throw"),c("return"),r[Symbol.asyncIterator]=function(){return this},r;function c(t){i[t]&&(r[t]=function(n){return new Promise((function(e,r){o.push([t,n,e,r])>1||a(t,n)}))})}function a(t,n){try{(e=i[t](n)).value instanceof u?Promise.resolve(e.value.v).then(s,l):f(o[0][2],e)}catch(t){f(o[0][3],t)}var e}function s(t){a("next",t)}function l(t){a("throw",t)}function f(t,n){t(n),o.shift(),o.length&&a(o[0][0],o[0][1])}}Object.create,Object.create;var s=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function l(t){return"function"==typeof t}function f(t){return l(null==t?void 0:t.then)}var d,p=((d=function(t){return function(n){t(this),this.message=n?n.length+" errors occurred during unsubscription:\n"+n.map((function(t,n){return n+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=n}}((function(t){Error.call(t),t.stack=(new Error).stack}))).prototype=Object.create(Error.prototype),d.prototype.constructor=d,d);function h(t,n){if(t){var e=t.indexOf(n);0<=e&&t.splice(e,1)}}var v=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}var n;return t.prototype.unsubscribe=function(){var t,n,e,r,u;if(!this.closed){this.closed=!0;var a=this._parentage;if(a)if(this._parentage=null,Array.isArray(a))try{for(var s=i(a),f=s.next();!f.done;f=s.next())f.value.remove(this)}catch(n){t={error:n}}finally{try{f&&!f.done&&(n=s.return)&&n.call(s)}finally{if(t)throw t.error}}else a.remove(this);var d=this.initialTeardown;if(l(d))try{d()}catch(t){u=t instanceof p?t.errors:[t]}var h=this._finalizers;if(h){this._finalizers=null;try{for(var v=i(h),y=v.next();!y.done;y=v.next()){var m=y.value;try{b(m)}catch(t){u=null!=u?u:[],t instanceof p?u=c(c([],o(u)),o(t.errors)):u.push(t)}}}catch(t){e={error:t}}finally{try{y&&!y.done&&(r=v.return)&&r.call(v)}finally{if(e)throw e.error}}}if(u)throw new p(u)}},t.prototype.add=function(n){var e;if(n&&n!==this)if(this.closed)b(n);else{if(n instanceof t){if(n.closed||n._hasParent(this))return;n._addParent(this)}(this._finalizers=null!==(e=this._finalizers)&&void 0!==e?e:[]).push(n)}},t.prototype._hasParent=function(t){var n=this._parentage;return n===t||Array.isArray(n)&&n.includes(t)},t.prototype._addParent=function(t){var n=this._parentage;this._parentage=Array.isArray(n)?(n.push(t),n):n?[n,t]:t},t.prototype._removeParent=function(t){var n=this._parentage;n===t?this._parentage=null:Array.isArray(n)&&h(n,t)},t.prototype.remove=function(n){var e=this._finalizers;e&&h(e,n),n instanceof t&&n._removeParent(this)},t.EMPTY=((n=new t).closed=!0,n),t}();function y(t){return t instanceof v||t&&"closed"in t&&l(t.remove)&&l(t.add)&&l(t.unsubscribe)}function b(t){l(t)?t():t.unsubscribe()}v.EMPTY;var m=null,g=null,w=void 0,x=!1,L=!1,E={setTimeout:function(t,n){for(var e=[],r=2;r<arguments.length;r++)e[r-2]=arguments[r];var i=E.delegate;return(null==i?void 0:i.setTimeout)?i.setTimeout.apply(i,c([t,n],o(e))):setTimeout.apply(void 0,c([t,n],o(e)))},clearTimeout:function(t){var n=E.delegate;return((null==n?void 0:n.clearTimeout)||clearTimeout)(t)},delegate:void 0};function S(t){E.setTimeout((function(){if(!m)throw t;m(t)}))}function k(){}var T=_("C",void 0,void 0);function _(t,n,e){return{kind:t,value:n,error:e}}var I=null,C=function(t){function n(n){var e=t.call(this)||this;return e.isStopped=!1,n?(e.destination=n,y(n)&&n.add(e)):e.destination=z,e}return e(n,t),n.create=function(t,n,e){return new M(t,n,e)},n.prototype.next=function(t){this.isStopped?H(function(t){return _("N",t,void 0)}(t),this):this._next(t)},n.prototype.error=function(t){this.isStopped?H(_("E",void 0,t),this):(this.isStopped=!0,this._error(t))},n.prototype.complete=function(){this.isStopped?H(T,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(t){this.destination.next(t)},n.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}(v),P=Function.prototype.bind;function A(t,n){return P.call(t,n)}var O=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var n=this.partialObserver;if(n.next)try{n.next(t)}catch(t){j(t)}},t.prototype.error=function(t){var n=this.partialObserver;if(n.error)try{n.error(t)}catch(t){j(t)}else j(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){j(t)}},t}(),M=function(t){function n(n,e,r){var i,o,c=t.call(this)||this;return l(n)||!n?i={next:null!=n?n:void 0,error:null!=e?e:void 0,complete:null!=r?r:void 0}:c&&L?((o=Object.create(n)).unsubscribe=function(){return c.unsubscribe()},i={next:n.next&&A(n.next,o),error:n.error&&A(n.error,o),complete:n.complete&&A(n.complete,o)}):i=n,c.destination=new O(i),c}return e(n,t),n}(C);function j(t){var n;x?(n=t,x&&I&&(I.errorThrown=!0,I.error=n)):S(t)}function H(t,n){var e=g;e&&E.setTimeout((function(){return e(t,n)}))}var z={closed:!0,next:k,error:function(t){throw t},complete:k},D="function"==typeof Symbol&&Symbol.observable||"@@observable";function B(t){return t}function Y(t){return 0===t.length?B:1===t.length?t[0]:function(n){return t.reduce((function(t,n){return n(t)}),n)}}var N=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(n){var e=new t;return e.source=this,e.operator=n,e},t.prototype.subscribe=function(t,n,e){var r,i=this,o=(r=t)&&r instanceof C||function(t){return t&&l(t.next)&&l(t.error)&&l(t.complete)}(r)&&y(r)?t:new M(t,n,e);return function(t){if(x){var n=!I;if(n&&(I={errorThrown:!1,error:null}),t(),n){var e=I,r=e.errorThrown,i=e.error;if(I=null,r)throw i}}else t()}((function(){var t=i,n=t.operator,e=t.source;o.add(n?n.call(o,e):e?i._subscribe(o):i._trySubscribe(o))})),o},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(n){t.error(n)}},t.prototype.forEach=function(t,n){var e=this;return new(n=U(n))((function(n,r){var i=new M({next:function(n){try{t(n)}catch(t){r(t),i.unsubscribe()}},error:r,complete:n});e.subscribe(i)}))},t.prototype._subscribe=function(t){var n;return null===(n=this.source)||void 0===n?void 0:n.subscribe(t)},t.prototype[D]=function(){return this},t.prototype.pipe=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return Y(t)(this)},t.prototype.toPromise=function(t){var n=this;return new(t=U(t))((function(t,e){var r;n.subscribe((function(t){return r=t}),(function(t){return e(t)}),(function(){return t(r)}))}))},t.create=function(n){return new t(n)},t}();function U(t){var n;return null!==(n=null!=t?t:w)&&void 0!==n?n:Promise}function R(t){return l(t[D])}function X(t){return Symbol.asyncIterator&&l(null==t?void 0:t[Symbol.asyncIterator])}function F(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var q="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function G(t){return l(null==t?void 0:t[q])}function J(t){return a(this,arguments,(function(){var n,e,i;return r(this,(function(r){switch(r.label){case 0:n=t.getReader(),r.label=1;case 1:r.trys.push([1,,9,10]),r.label=2;case 2:return[4,u(n.read())];case 3:return e=r.sent(),i=e.value,e.done?[4,u(void 0)]:[3,5];case 4:return[2,r.sent()];case 5:return[4,u(i)];case 6:return[4,r.sent()];case 7:return r.sent(),[3,2];case 8:return[3,10];case 9:return n.releaseLock(),[7];case 10:return[2]}}))}))}function K(t){return l(null==t?void 0:t.getReader)}function Q(t){if(t instanceof N)return t;if(null!=t){if(R(t))return o=t,new N((function(t){var n=o[D]();if(l(n.subscribe))return n.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(s(t))return r=t,new N((function(t){for(var n=0;n<r.length&&!t.closed;n++)t.next(r[n]);t.complete()}));if(f(t))return e=t,new N((function(t){e.then((function(n){t.closed||(t.next(n),t.complete())}),(function(n){return t.error(n)})).then(null,S)}));if(X(t))return V(t);if(G(t))return n=t,new N((function(t){var e,r;try{for(var o=i(n),c=o.next();!c.done;c=o.next()){var u=c.value;if(t.next(u),t.closed)return}}catch(t){e={error:t}}finally{try{c&&!c.done&&(r=o.return)&&r.call(o)}finally{if(e)throw e.error}}t.complete()}));if(K(t))return V(J(t))}var n,e,r,o;throw F(t)}function V(t){return new N((function(n){(function(t,n){var e,o,c,u,a,s,l,f;return a=this,s=void 0,f=function(){var a,s;return r(this,(function(r){switch(r.label){case 0:r.trys.push([0,5,6,11]),e=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,e=t[Symbol.asyncIterator];return e?e.call(t):(t=i(t),n={},r("next"),r("throw"),r("return"),n[Symbol.asyncIterator]=function(){return this},n);function r(e){n[e]=t[e]&&function(n){return new Promise((function(r,i){!function(t,n,e,r){Promise.resolve(r).then((function(n){t({value:n,done:e})}),n)}(r,i,(n=t[e](n)).done,n.value)}))}}}(t),r.label=1;case 1:return[4,e.next()];case 2:if((o=r.sent()).done)return[3,4];if(a=o.value,n.next(a),n.closed)return[2];r.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return s=r.sent(),c={error:s},[3,11];case 6:return r.trys.push([6,,9,10]),o&&!o.done&&(u=e.return)?[4,u.call(e)]:[3,8];case 7:r.sent(),r.label=8;case 8:return[3,10];case 9:if(c)throw c.error;return[7];case 10:return[7];case 11:return n.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(t,n){function e(t){try{i(f.next(t))}catch(t){n(t)}}function r(t){try{i(f.throw(t))}catch(t){n(t)}}function i(n){var i;n.done?t(n.value):(i=n.value,i instanceof l?i:new l((function(t){t(i)}))).then(e,r)}i((f=f.apply(a,s||[])).next())}))})(t,n).catch((function(t){return n.error(t)}))}))}function W(t){return function(n){if(function(t){return l(null==t?void 0:t.lift)}(n))return n.lift((function(n){try{return t(n,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}function Z(t,n,e,r,i){return new $(t,n,e,r,i)}var $=function(t){function n(n,e,r,i,o,c){var u=t.call(this,n)||this;return u.onFinalize=o,u.shouldUnsubscribe=c,u._next=e?function(t){try{e(t)}catch(t){n.error(t)}}:t.prototype._next,u._error=i?function(t){try{i(t)}catch(t){n.error(t)}finally{this.unsubscribe()}}:t.prototype._error,u._complete=r?function(){try{r()}catch(t){n.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,u}return e(n,t),n.prototype.unsubscribe=function(){var n;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var e=this.closed;t.prototype.unsubscribe.call(this),!e&&(null===(n=this.onFinalize)||void 0===n||n.call(this))}},n}(C);function tt(t,n){return W((function(e,r){var i=0;e.subscribe(Z(r,(function(e){r.next(t.call(n,e,i++))})))}))}function nt(t,n,e,r,i){void 0===r&&(r=0),void 0===i&&(i=!1);var o=n.schedule((function(){e(),i?t.add(this.schedule(null,r)):this.unsubscribe()}),r);if(t.add(o),!i)return o}function et(t,n,e){return void 0===e&&(e=1/0),l(n)?et((function(e,r){return tt((function(t,i){return n(e,t,r,i)}))(Q(t(e,r)))}),e):("number"==typeof n&&(e=n),W((function(n,r){return function(t,n,e,r,i,o,c,u){var a=[],s=0,l=0,f=!1,d=function(){!f||a.length||s||n.complete()},p=function(t){return s<r?h(t):a.push(t)},h=function(t){s++;var i=!1;Q(e(t,l++)).subscribe(Z(n,(function(t){n.next(t)}),(function(){i=!0}),void 0,(function(){if(i)try{s--;for(;a.length&&s<r;)t=void 0,t=a.shift(),h(t);d()}catch(t){n.error(t)}var t})))};return t.subscribe(Z(n,p,(function(){f=!0,d()}))),function(){}}(n,r,t,e)})))}var rt=Array.isArray;var it=["addListener","removeListener"],ot=["addEventListener","removeEventListener"],ct=["on","off"];function ut(t,n,e,r){if(l(e)&&(r=e,e=void 0),r)return ut(t,n,e).pipe((i=r,tt((function(t){return function(t,n){return rt(n)?t.apply(void 0,c([],o(n))):t(n)}(i,t)}))));var i,u=o(function(t){return l(t.addEventListener)&&l(t.removeEventListener)}(t)?ot.map((function(r){return function(i){return t[r](n,i,e)}})):function(t){return l(t.addListener)&&l(t.removeListener)}(t)?it.map(at(t,n)):function(t){return l(t.on)&&l(t.off)}(t)?ct.map(at(t,n)):[],2),a=u[0],f=u[1];if(!a&&s(t))return et((function(t){return ut(t,n,e)}))(Q(t));if(!a)throw new TypeError("Invalid event target");return new N((function(t){var n=function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];return t.next(1<n.length?n:n[0])};return a(n),function(){return f(n)}}))}function at(t,n){return function(e){return function(r){return t[e](n,r)}}}var st=function(t){function n(n,e){return t.call(this)||this}return e(n,t),n.prototype.schedule=function(t,n){return void 0===n&&(n=0),this},n}(v),lt={setInterval:function(t,n){for(var e=[],r=2;r<arguments.length;r++)e[r-2]=arguments[r];var i=lt.delegate;return(null==i?void 0:i.setInterval)?i.setInterval.apply(i,c([t,n],o(e))):setInterval.apply(void 0,c([t,n],o(e)))},clearInterval:function(t){var n=lt.delegate;return((null==n?void 0:n.clearInterval)||clearInterval)(t)},delegate:void 0},ft=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.scheduler=n,r.work=e,r.pending=!1,r}return e(n,t),n.prototype.schedule=function(t,n){if(void 0===n&&(n=0),this.closed)return this;this.state=t;var e=this.id,r=this.scheduler;return null!=e&&(this.id=this.recycleAsyncId(r,e,n)),this.pending=!0,this.delay=n,this.id=this.id||this.requestAsyncId(r,this.id,n),this},n.prototype.requestAsyncId=function(t,n,e){return void 0===e&&(e=0),lt.setInterval(t.flush.bind(t,this),e)},n.prototype.recycleAsyncId=function(t,n,e){if(void 0===e&&(e=0),null!=e&&this.delay===e&&!1===this.pending)return n;lt.clearInterval(n)},n.prototype.execute=function(t,n){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var e=this._execute(t,n);if(e)return e;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},n.prototype._execute=function(t,n){var e,r=!1;try{this.work(t)}catch(t){r=!0,e=t||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),e},n.prototype.unsubscribe=function(){if(!this.closed){var n=this.id,e=this.scheduler,r=e.actions;this.work=this.state=this.scheduler=null,this.pending=!1,h(r,this),null!=n&&(this.id=this.recycleAsyncId(e,n,null)),this.delay=null,t.prototype.unsubscribe.call(this)}},n}(st),dt={now:function(){return(dt.delegate||Date).now()},delegate:void 0},pt=function(){function t(n,e){void 0===e&&(e=t.now),this.schedulerActionCtor=n,this.now=e}return t.prototype.schedule=function(t,n,e){return void 0===n&&(n=0),new this.schedulerActionCtor(this,t).schedule(e,n)},t.now=dt.now,t}(),ht=new(function(t){function n(n,e){void 0===e&&(e=pt.now);var r=t.call(this,n,e)||this;return r.actions=[],r._active=!1,r._scheduled=void 0,r}return e(n,t),n.prototype.flush=function(t){var n=this.actions;if(this._active)n.push(t);else{var e;this._active=!0;do{if(e=t.execute(t.state,t.delay))break}while(t=n.shift());if(this._active=!1,e){for(;t=n.shift();)t.unsubscribe();throw e}}},n}(pt))(ft),vt=ht;function yt(t,n){return void 0===n&&(n=0),W((function(e,r){e.subscribe(Z(r,(function(e){return nt(r,t,(function(){return r.next(e)}),n)}),(function(){return nt(r,t,(function(){return r.complete()}),n)}),(function(e){return nt(r,t,(function(){return r.error(e)}),n)})))}))}function bt(t,n){return void 0===n&&(n=0),W((function(e,r){r.add(t.schedule((function(){return e.subscribe(r)}),n))}))}function mt(t,n){if(!t)throw new Error("Iterable cannot be null");return new N((function(e){nt(e,n,(function(){var r=t[Symbol.asyncIterator]();nt(e,n,(function(){r.next().then((function(t){t.done?e.complete():e.next(t.value)}))}),0,!0)}))}))}function gt(t,n){return n?function(t,n){if(null!=t){if(R(t))return function(t,n){return Q(t).pipe(bt(n),yt(n))}(t,n);if(s(t))return function(t,n){return new N((function(e){var r=0;return n.schedule((function(){r===t.length?e.complete():(e.next(t[r++]),e.closed||this.schedule())}))}))}(t,n);if(f(t))return function(t,n){return Q(t).pipe(bt(n),yt(n))}(t,n);if(X(t))return mt(t,n);if(G(t))return function(t,n){return new N((function(e){var r;return nt(e,n,(function(){r=t[q](),nt(e,n,(function(){var t,n,i;try{n=(t=r.next()).value,i=t.done}catch(t){return void e.error(t)}i?e.complete():e.next(n)}),0,!0)})),function(){return l(null==r?void 0:r.return)&&r.return()}}))}(t,n);if(K(t))return function(t,n){return mt(J(t),n)}(t,n)}throw F(t)}(t,n):Q(t)}var wt=function(t,n,e,r,i,o,c,u,a,s){this.id=void 0,this.parkingHash=void 0,this.city=void 0,this.timeOccupied=void 0,this.zone=void 0,this.tariff=void 0,this.penaltyIndex=void 0,this.maxTime=void 0,this.locationX=void 0,this.locationY=void 0,this.id=t,this.parkingHash=n,this.timeOccupied=e,this.zone=r,this.tariff=i,3===this.zone?(this.penaltyIndex=1,this.maxTime=0):(this.penaltyIndex=o,this.maxTime=c),this.city=u,this.locationX=a,this.locationY=s};function xt(){St();var t,n,e=function(){var t=St(),n=new Date,e=360*n.getHours(),r=60*n.getMinutes(),i=n.getSeconds()+e+r,o=t.parkingSpot.timeOccupied.split(":",3);return i-(360*parseInt(o[0])+60*parseInt(o[1])+parseInt(o[2]))-1}(),r=(t=1e3,void 0===t&&(t=0),void 0===n&&(n=ht),t<0&&(t=0),function(t,n,e){void 0===t&&(t=0),void 0===e&&(e=vt);var r,i=-1;return null!=n&&((r=n)&&l(r.schedule)?e=n:i=n),new N((function(n){var r=function(t){return t instanceof Date&&!isNaN(t)}(t)?+t-e.now():t;r<0&&(r=0);var o=0;return e.schedule((function(){n.closed||(n.next(o++),0<=i?this.schedule(void 0,i):n.complete())}),r)}))}(t,t,n)).pipe(tt((function(t){return function(t,n){var e=St(),r=["","",0,!1],i=!1;t+=n,r[0]="".concat(Math.floor(t/360),":").concat(Math.floor(t%360/60),":").concat(t%360%60);var o=e.parkingSpot.tariff;if(e.parkingSpot.zone<3&&e.parkingSpot.maxTime<t)o*=e.parkingSpot.penaltyIndex,i=!0;else{var c=e.parkingSpot.maxTime-t;r[1]="".concat(Math.floor(c/360),":").concat(Math.floor(c%360/60),":").concat(c%360%60)}return r[2]=Math.round(.2*o*t*100)/100,r[3]=i,r}(e,t)}))).subscribe((function(t){!function(t){var n=St(),e=t[0];n.price=t[2];var r=document.getElementById("timeSpentLabel"),i=document.getElementById("priceLabel"),o=document.getElementById("remainingTimeLabel");t[3]?(r.classList.add("infoLabelPenalty"),i.classList.add("infoLabelPenalty"),o.innerHTML="".concat("You have exceeded the time limit."),o.classList.add("infoLabelPenalty")):o.innerHTML="".concat("Remaining time until penalty kicks in: ").concat(t[1]),r.innerHTML="".concat("Duration: ").concat(e),i.innerHTML="".concat("Price: ").concat(n.price," ").concat("RSD")}(t)}));return r}var Lt=void 0,Et=function(){function n(t){this.currentTab=t,this.parked=!1,this.parkingSpot=null,this.placesList=[]}return Object.defineProperty(n.prototype,"places",{get:function(){var n,e;return 0===this.placesList.length&&(this.placesList=(n="".concat(t,"/places/"),e=[],fetch(n).then((function(t){return t.json()})).then((function(t){e=t})),console.log(e),e)),this.placesList.map((function(t){return console.log(t.name)})),[]},enumerable:!1,configurable:!0}),n}();function St(){return void 0===Lt&&(Lt=new Et("finder-tab")),Lt}var kt=St();function Tt(t){kt.currentTab!==t&&(document.getElementById(kt.currentTab).classList.remove("selectedTab"),document.getElementById(t).classList.add("selectedTab"),kt.currentTab=t,"finder-tab"===kt.currentTab?_t():It())}function _t(){var t=document.getElementsByClassName("contentDiv")[0];t.childNodes.forEach((function(n){t.removeChild(n)}));var n=document.createElement("div");n.classList.add("filterDiv");var e=document.createElement("label");e.innerHTML="City: ",n.appendChild(e);var r,i=document.createElement("select");St().places.forEach((function(t){(r=document.createElement("option")).innerHTML=t,r.value=t,i.appendChild(r)})),n.appendChild(i),t.appendChild(n)}function It(){var n=document.getElementsByClassName("contentDiv")[0];n.childNodes.forEach((function(t){n.removeChild(t)}));var e,r,i,o=document.createElement("div");if(o.classList.add("parkingSpotBox"),kt.parked&&o.classList.add("parkingSpotBoxAddition"),n.appendChild(o),kt.parked){var c=document.createElement("div");c.classList.add("infoBox"),(s=document.createElement("label")).setAttribute("id","timeSpentLabel"),s.classList.add("infoLabel"),c.appendChild(s),(s=document.createElement("label")).setAttribute("id","priceLabel"),s.classList.add("infoLabel"),c.appendChild(s),(s=document.createElement("label")).setAttribute("id","remainingTimeLabel"),s.classList.add("infoLabel"),c.appendChild(s),o.appendChild(c);var u=document.createElement("button");u.innerHTML="Pay",o.appendChild(u);var a=xt();u.addEventListener("click",(function(n){!function(n){n.unsubscribe(),function(){var n=St(),e="".concat(t,"/parkings/").concat(n.parkingSpot.id);gt(fetch(e,{method:"PUT",headers:{"Content-type":"application/json"},body:JSON.stringify({id:n.parkingSpot.id,code:n.parkingSpot.parkingHash,city:n.parkingSpot.city,zone:n.parkingSpot.zone,tariff:n.parkingSpot.tariff,penaltyIndex:n.parkingSpot.penaltyIndex,maxTime:n.parkingSpot.maxTime,locationX:n.parkingSpot.locationX,locationY:n.parkingSpot.locationY,occupied:!1,timeOccupied:null})})),n.parkingSpot=null}();var e=St(),r="Parking time ended, your vehicle is on the way. Thank you for using our services.\nEstimated price: "+e.price;alert(r),e.parked=!1,It()}(a)}))}else{var s;(s=document.createElement("label")).classList.add("enterCodeLabel"),s.innerHTML="".concat("Enter your code here:"),o.appendChild(s);var l=document.createElement("input");l.maxLength=9,o.appendChild(l),ut(l,"input").pipe((void 0===i&&(i=ht),W((function(t,n){var e=null,r=null,o=null,c=function(){if(e){e.unsubscribe(),e=null;var t=r;r=null,n.next(t)}};function u(){var t=o+500,r=i.now();if(r<t)return e=this.schedule(void 0,t-r),void n.add(e);c()}t.subscribe(Z(n,(function(t){r=t,o=i.now(),e||(e=i.schedule(u,500),n.add(e))}),(function(){c(),n.complete()}),void 0,(function(){r=e=null})))}))),tt((function(t){return t.target.value})),(r=function(t){return 9==t.length},W((function(t,n){var e=0;t.subscribe(Z(n,(function(t){return r.call(void 0,t,e++)&&n.next(t)})))}))),(e=function(n){return e=n,r="".concat(t,"/parkings/?code=").concat(e),gt(fetch(r).then((function(t){if(t.ok)return t.json();throw new Error("Parking not found")})).catch((function(t){return console.log("Parking spot not found")})));var e,r},W((function(t,n){var r=null,i=!1,o=function(){return i&&!r&&n.complete()};t.subscribe(Z(n,(function(t){null==r||r.unsubscribe(),Q(e(t)).subscribe(r=Z(n,(function(t){return n.next(t)}),(function(){r=null,o()})))}),(function(){i=!0,o()})))})))).subscribe((function(t){if(!0===t[0].occupied){var n=St();n.parked=!0,n.parkingSpot=new wt(t[0].id,t[0].parkingHash,t[0].timeOccupied,t[0].zone,t[0].tariff,t[0].penaltyIndex,t[0].maxTime,t[0].city,t[0].locationX,t[0].locationY),It()}else alert("This is not your parking spot.")}))}}St(),function(t){var n=document.createElement("div");n.classList.add("mainDiv"),t.appendChild(n);var e=document.createElement("div");e.classList.add("footer");var r=document.createElement("p");r.innerHTML="© Powered by Elfak",e.appendChild(r),t.appendChild(e);var i=document.createElement("div");i.classList.add("centerDiv"),n.appendChild(i);var o=document.createElement("div");o.classList.add("optionsDiv"),i.appendChild(o);var c=document.createElement("div");c.classList.add("contentDiv"),i.appendChild(c);var u=document.createElement("div");u.classList.add("tabsDiv"),o.appendChild(u);var a=document.createElement("div");a.classList.add("tab"),a.classList.add("selectedTab"),a.innerHTML="Find parking",a.setAttribute("id","finder-tab"),a.addEventListener("click",(function(t){Tt("finder-tab")})),u.appendChild(a),(a=document.createElement("div")).classList.add("tab"),a.innerHTML="Check status",a.setAttribute("id","checker-tab"),a.addEventListener("click",(function(t){Tt("checker-tab")})),u.appendChild(a);var s=document.createElement("div");s.classList.add("hrLine"),o.appendChild(s),_t()}(document.body)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QWlELENBQUt2RSxTQUFTMVcsSyIsInNvdXJjZXMiOlsid2VicGFjazovL3BhcmtpbmdmaW5kZXItcnhqcy8uL3NyYy9lbnZpcm9ubWVudHMudHMiLCJ3ZWJwYWNrOi8vcGFya2luZ2ZpbmRlci1yeGpzLy4vbm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIndlYnBhY2s6Ly9wYXJraW5nZmluZGVyLXJ4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0FycmF5TGlrZS5qcyIsIndlYnBhY2s6Ly9wYXJraW5nZmluZGVyLXJ4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0Z1bmN0aW9uLmpzIiwid2VicGFjazovL3BhcmtpbmdmaW5kZXItcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzUHJvbWlzZS5qcyIsIndlYnBhY2s6Ly9wYXJraW5nZmluZGVyLXJ4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9VbnN1YnNjcmlwdGlvbkVycm9yLmpzIiwid2VicGFjazovL3BhcmtpbmdmaW5kZXItcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2NyZWF0ZUVycm9yQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vcGFya2luZ2ZpbmRlci1yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvYXJyUmVtb3ZlLmpzIiwid2VicGFjazovL3BhcmtpbmdmaW5kZXItcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9TdWJzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vcGFya2luZ2ZpbmRlci1yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL2NvbmZpZy5qcyIsIndlYnBhY2s6Ly9wYXJraW5nZmluZGVyLXJ4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL3RpbWVvdXRQcm92aWRlci5qcyIsIndlYnBhY2s6Ly9wYXJraW5nZmluZGVyLXJ4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9yZXBvcnRVbmhhbmRsZWRFcnJvci5qcyIsIndlYnBhY2s6Ly9wYXJraW5nZmluZGVyLXJ4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9ub29wLmpzIiwid2VicGFjazovL3BhcmtpbmdmaW5kZXItcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9Ob3RpZmljYXRpb25GYWN0b3JpZXMuanMiLCJ3ZWJwYWNrOi8vcGFya2luZ2ZpbmRlci1yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvZXJyb3JDb250ZXh0LmpzIiwid2VicGFjazovL3BhcmtpbmdmaW5kZXItcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9TdWJzY3JpYmVyLmpzIiwid2VicGFjazovL3BhcmtpbmdmaW5kZXItcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zeW1ib2wvb2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9wYXJraW5nZmluZGVyLXJ4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly9wYXJraW5nZmluZGVyLXJ4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9waXBlLmpzIiwid2VicGFjazovL3BhcmtpbmdmaW5kZXItcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9PYnNlcnZhYmxlLmpzIiwid2VicGFjazovL3BhcmtpbmdmaW5kZXItcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzSW50ZXJvcE9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vcGFya2luZ2ZpbmRlci1yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNBc3luY0l0ZXJhYmxlLmpzIiwid2VicGFjazovL3BhcmtpbmdmaW5kZXItcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL3Rocm93VW5vYnNlcnZhYmxlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vcGFya2luZ2ZpbmRlci1yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3N5bWJvbC9pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9wYXJraW5nZmluZGVyLXJ4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0l0ZXJhYmxlLmpzIiwid2VicGFjazovL3BhcmtpbmdmaW5kZXItcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzUmVhZGFibGVTdHJlYW1MaWtlLmpzIiwid2VicGFjazovL3BhcmtpbmdmaW5kZXItcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2lubmVyRnJvbS5qcyIsIndlYnBhY2s6Ly9wYXJraW5nZmluZGVyLXJ4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9saWZ0LmpzIiwid2VicGFjazovL3BhcmtpbmdmaW5kZXItcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvT3BlcmF0b3JTdWJzY3JpYmVyLmpzIiwid2VicGFjazovL3BhcmtpbmdmaW5kZXItcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWFwLmpzIiwid2VicGFjazovL3BhcmtpbmdmaW5kZXItcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2V4ZWN1dGVTY2hlZHVsZS5qcyIsIndlYnBhY2s6Ly9wYXJraW5nZmluZGVyLXJ4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlTWFwLmpzIiwid2VicGFjazovL3BhcmtpbmdmaW5kZXItcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VJbnRlcm5hbHMuanMiLCJ3ZWJwYWNrOi8vcGFya2luZ2ZpbmRlci1yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvbWFwT25lT3JNYW55QXJncy5qcyIsIndlYnBhY2s6Ly9wYXJraW5nZmluZGVyLXJ4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9mcm9tRXZlbnQuanMiLCJ3ZWJwYWNrOi8vcGFya2luZ2ZpbmRlci1yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlci9BY3Rpb24uanMiLCJ3ZWJwYWNrOi8vcGFya2luZ2ZpbmRlci1yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlci9pbnRlcnZhbFByb3ZpZGVyLmpzIiwid2VicGFjazovL3BhcmtpbmdmaW5kZXItcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvQXN5bmNBY3Rpb24uanMiLCJ3ZWJwYWNrOi8vcGFya2luZ2ZpbmRlci1yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlci9kYXRlVGltZXN0YW1wUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vcGFya2luZ2ZpbmRlci1yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL1NjaGVkdWxlci5qcyIsIndlYnBhY2s6Ly9wYXJraW5nZmluZGVyLXJ4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL2FzeW5jLmpzIiwid2VicGFjazovL3BhcmtpbmdmaW5kZXItcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvQXN5bmNTY2hlZHVsZXIuanMiLCJ3ZWJwYWNrOi8vcGFya2luZ2ZpbmRlci1yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9vYnNlcnZlT24uanMiLCJ3ZWJwYWNrOi8vcGFya2luZ2ZpbmRlci1yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9zdWJzY3JpYmVPbi5qcyIsIndlYnBhY2s6Ly9wYXJraW5nZmluZGVyLXJ4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlQXN5bmNJdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly9wYXJraW5nZmluZGVyLXJ4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9mcm9tLmpzIiwid2VicGFjazovL3BhcmtpbmdmaW5kZXItcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVkLmpzIiwid2VicGFjazovL3BhcmtpbmdmaW5kZXItcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVPYnNlcnZhYmxlLmpzIiwid2VicGFjazovL3BhcmtpbmdmaW5kZXItcnhqcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVBcnJheS5qcyIsIndlYnBhY2s6Ly9wYXJraW5nZmluZGVyLXJ4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlUHJvbWlzZS5qcyIsIndlYnBhY2s6Ly9wYXJraW5nZmluZGVyLXJ4anMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlSXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vcGFya2luZ2ZpbmRlci1yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZS5qcyIsIndlYnBhY2s6Ly9wYXJraW5nZmluZGVyLXJ4anMvLi9zcmMvbW9kZWxzL1BhcmtpbmdTcG90LnRzIiwid2VicGFjazovL3BhcmtpbmdmaW5kZXItcnhqcy8uL3NyYy9jb250cm9sbGVyL29ic2VydmFibGUudHMiLCJ3ZWJwYWNrOi8vcGFya2luZ2ZpbmRlci1yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29ic2VydmFibGUvaW50ZXJ2YWwuanMiLCJ3ZWJwYWNrOi8vcGFya2luZ2ZpbmRlci1yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29ic2VydmFibGUvdGltZXIuanMiLCJ3ZWJwYWNrOi8vcGFya2luZ2ZpbmRlci1yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNTY2hlZHVsZXIuanMiLCJ3ZWJwYWNrOi8vcGFya2luZ2ZpbmRlci1yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNEYXRlLmpzIiwid2VicGFjazovL3BhcmtpbmdmaW5kZXItcnhqcy8uL3NyYy9kcmF3aW5nLnRzIiwid2VicGFjazovL3BhcmtpbmdmaW5kZXItcnhqcy8uL3NyYy9tb2RlbHMvY2xpZW50U3RhdGUudHMiLCJ3ZWJwYWNrOi8vcGFya2luZ2ZpbmRlci1yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9zd2l0Y2hNYXAuanMiLCJ3ZWJwYWNrOi8vcGFya2luZ2ZpbmRlci1yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vcGFya2luZ2ZpbmRlci1yeGpzLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9kZWJvdW5jZVRpbWUuanMiLCJ3ZWJwYWNrOi8vcGFya2luZ2ZpbmRlci1yeGpzLy4vc3JjL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBlbnZpcm9ubWVudHMgPSB7XHJcbiAgICBjb2RlTGVuZ3RoIDogOSxcclxuICAgIFVSTCA6IFwiaHR0cDovL2xvY2FsaG9zdDozMDAwXCIsXHJcbiAgICBpbml0aWFsVGFiIDogXCJmaW5kZXItdGFiXCIsXHJcbiAgICBjb2RlRXJyb3I6IFwiUGFya2luZyBzcG90IG5vdCBmb3VuZFwiLFxyXG4gICAgZm9vdGVyOiBcIsKpIFBvd2VyZWQgYnkgRWxmYWtcIixcclxuICAgIGxhYmVsRW50ZXJDb2RlU3RyaW5nOlwiRW50ZXIgeW91ciBjb2RlIGhlcmU6XCIsXHJcbiAgICBsYWJlbFRpbWVTdHJpbmc6XCJEdXJhdGlvbjogXCIsXHJcbiAgICBsYWJlbFByaWNlU3RyaW5nOlwiUHJpY2U6IFwiLFxyXG4gICAgbGFiZWxSZW1haW5pbmdUaW1lU3RyaW5nOiBcIlJlbWFpbmluZyB0aW1lIHVudGlsIHBlbmFsdHkga2lja3MgaW46IFwiLFxyXG4gICAgbGFiZWxSZW1haW5pbmdUaW1lUGVuYWx0eVN0cmluZzogXCJZb3UgaGF2ZSBleGNlZWRlZCB0aGUgdGltZSBsaW1pdC5cIixcclxuICAgIHByaWNlUGVyU2Vjb25kOiAwLjIsXHJcbiAgICBjdXJyZW5jeTogXCJSU0RcIixcclxuICAgIHBheW1lbnRJbmZvOiBcIlBhcmtpbmcgdGltZSBlbmRlZCwgeW91ciB2ZWhpY2xlIGlzIG9uIHRoZSB3YXkuIFRoYW5rIHlvdSBmb3IgdXNpbmcgb3VyIHNlcnZpY2VzLlxcbkVzdGltYXRlZCBwcmljZTogXCIsXHJcbiAgICBmaW5kUGFya2luZ0luZm9TdHJpbmc6IFwiUGxlYXNlIHNlbGVjdCB5b3VyIGxvY2F0aW9uIHRvIGZpbmQgbmVhcmJ5IHBhcmtpbmcuXCIsXHJcbn07IiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXHJcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgICAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fY3JlYXRlQmluZGluZyA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XHJcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xyXG4gICAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xyXG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIG9bazJdID0gbVtrXTtcclxufSk7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIG8pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgcCkpIF9fY3JlYXRlQmluZGluZyhvLCBtLCBwKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcclxuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcclxuICAgIGlmICghbSkgcmV0dXJuIG87XHJcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cclxuICAgIH1cclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuLyoqIEBkZXByZWNhdGVkICovXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuLyoqIEBkZXByZWNhdGVkICovXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcclxuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xyXG4gICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxyXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxyXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcclxuICAgIHJldHVybiByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheSh0bywgZnJvbSwgcGFjaykge1xyXG4gICAgaWYgKHBhY2sgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgZm9yICh2YXIgaSA9IDAsIGwgPSBmcm9tLmxlbmd0aCwgYXI7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XHJcbiAgICAgICAgICAgIGlmICghYXIpIGFyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSwgMCwgaSk7XHJcbiAgICAgICAgICAgIGFyW2ldID0gZnJvbVtpXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdG8uY29uY2F0KGFyIHx8IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20pKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxyXG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XHJcbiAgICB2YXIgaSwgcDtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBuID09PSBcInJldHVyblwiIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xyXG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XHJcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xyXG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcclxuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcclxuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xyXG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRTZXQocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xyXG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xyXG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEluKHN0YXRlLCByZWNlaXZlcikge1xyXG4gICAgaWYgKHJlY2VpdmVyID09PSBudWxsIHx8ICh0eXBlb2YgcmVjZWl2ZXIgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHJlY2VpdmVyICE9PSBcImZ1bmN0aW9uXCIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHVzZSAnaW4nIG9wZXJhdG9yIG9uIG5vbi1vYmplY3RcIik7XHJcbiAgICByZXR1cm4gdHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciA9PT0gc3RhdGUgOiBzdGF0ZS5oYXMocmVjZWl2ZXIpO1xyXG59XHJcbiIsImV4cG9ydCB2YXIgaXNBcnJheUxpa2UgPSAoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHggJiYgdHlwZW9mIHgubGVuZ3RoID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgeCAhPT0gJ2Z1bmN0aW9uJzsgfSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzQXJyYXlMaWtlLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzRnVuY3Rpb24uanMubWFwIiwiaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gXCIuL2lzRnVuY3Rpb25cIjtcclxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvbWlzZSh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIGlzRnVuY3Rpb24odmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHZhbHVlLnRoZW4pO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzUHJvbWlzZS5qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVFcnJvckNsYXNzIH0gZnJvbSAnLi9jcmVhdGVFcnJvckNsYXNzJztcclxuZXhwb3J0IHZhciBVbnN1YnNjcmlwdGlvbkVycm9yID0gY3JlYXRlRXJyb3JDbGFzcyhmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gVW5zdWJzY3JpcHRpb25FcnJvckltcGwoZXJyb3JzKSB7XHJcbiAgICAgICAgX3N1cGVyKHRoaXMpO1xyXG4gICAgICAgIHRoaXMubWVzc2FnZSA9IGVycm9yc1xyXG4gICAgICAgICAgICA/IGVycm9ycy5sZW5ndGggKyBcIiBlcnJvcnMgb2NjdXJyZWQgZHVyaW5nIHVuc3Vic2NyaXB0aW9uOlxcblwiICsgZXJyb3JzLm1hcChmdW5jdGlvbiAoZXJyLCBpKSB7IHJldHVybiBpICsgMSArIFwiKSBcIiArIGVyci50b1N0cmluZygpOyB9KS5qb2luKCdcXG4gICcpXHJcbiAgICAgICAgICAgIDogJyc7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gJ1Vuc3Vic2NyaXB0aW9uRXJyb3InO1xyXG4gICAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzO1xyXG4gICAgfTtcclxufSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVVuc3Vic2NyaXB0aW9uRXJyb3IuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUVycm9yQ2xhc3MoY3JlYXRlSW1wbCkge1xyXG4gICAgdmFyIF9zdXBlciA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xyXG4gICAgICAgIEVycm9yLmNhbGwoaW5zdGFuY2UpO1xyXG4gICAgICAgIGluc3RhbmNlLnN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XHJcbiAgICB9O1xyXG4gICAgdmFyIGN0b3JGdW5jID0gY3JlYXRlSW1wbChfc3VwZXIpO1xyXG4gICAgY3RvckZ1bmMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xyXG4gICAgY3RvckZ1bmMucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvckZ1bmM7XHJcbiAgICByZXR1cm4gY3RvckZ1bmM7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlRXJyb3JDbGFzcy5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gYXJyUmVtb3ZlKGFyciwgaXRlbSkge1xyXG4gICAgaWYgKGFycikge1xyXG4gICAgICAgIHZhciBpbmRleCA9IGFyci5pbmRleE9mKGl0ZW0pO1xyXG4gICAgICAgIDAgPD0gaW5kZXggJiYgYXJyLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICB9XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXJyUmVtb3ZlLmpzLm1hcCIsImltcG9ydCB7IF9fcmVhZCwgX19zcHJlYWRBcnJheSwgX192YWx1ZXMgfSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vdXRpbC9pc0Z1bmN0aW9uJztcclxuaW1wb3J0IHsgVW5zdWJzY3JpcHRpb25FcnJvciB9IGZyb20gJy4vdXRpbC9VbnN1YnNjcmlwdGlvbkVycm9yJztcclxuaW1wb3J0IHsgYXJyUmVtb3ZlIH0gZnJvbSAnLi91dGlsL2FyclJlbW92ZSc7XHJcbnZhciBTdWJzY3JpcHRpb24gPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gU3Vic2NyaXB0aW9uKGluaXRpYWxUZWFyZG93bikge1xyXG4gICAgICAgIHRoaXMuaW5pdGlhbFRlYXJkb3duID0gaW5pdGlhbFRlYXJkb3duO1xyXG4gICAgICAgIHRoaXMuY2xvc2VkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5fcGFyZW50YWdlID0gbnVsbDtcclxuICAgICAgICB0aGlzLl9maW5hbGl6ZXJzID0gbnVsbDtcclxuICAgIH1cclxuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGVfMSwgX2EsIGVfMiwgX2I7XHJcbiAgICAgICAgdmFyIGVycm9ycztcclxuICAgICAgICBpZiAoIXRoaXMuY2xvc2VkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgdmFyIF9wYXJlbnRhZ2UgPSB0aGlzLl9wYXJlbnRhZ2U7XHJcbiAgICAgICAgICAgIGlmIChfcGFyZW50YWdlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoX3BhcmVudGFnZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfcGFyZW50YWdlXzEgPSBfX3ZhbHVlcyhfcGFyZW50YWdlKSwgX3BhcmVudGFnZV8xXzEgPSBfcGFyZW50YWdlXzEubmV4dCgpOyAhX3BhcmVudGFnZV8xXzEuZG9uZTsgX3BhcmVudGFnZV8xXzEgPSBfcGFyZW50YWdlXzEubmV4dCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50XzEgPSBfcGFyZW50YWdlXzFfMS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudF8xLnJlbW92ZSh0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9wYXJlbnRhZ2VfMV8xICYmICFfcGFyZW50YWdlXzFfMS5kb25lICYmIChfYSA9IF9wYXJlbnRhZ2VfMS5yZXR1cm4pKSBfYS5jYWxsKF9wYXJlbnRhZ2VfMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIF9wYXJlbnRhZ2UucmVtb3ZlKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBpbml0aWFsRmluYWxpemVyID0gdGhpcy5pbml0aWFsVGVhcmRvd247XHJcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGluaXRpYWxGaW5hbGl6ZXIpKSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxGaW5hbGl6ZXIoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gZSBpbnN0YW5jZW9mIFVuc3Vic2NyaXB0aW9uRXJyb3IgPyBlLmVycm9ycyA6IFtlXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgX2ZpbmFsaXplcnMgPSB0aGlzLl9maW5hbGl6ZXJzO1xyXG4gICAgICAgICAgICBpZiAoX2ZpbmFsaXplcnMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZpbmFsaXplcnMgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfZmluYWxpemVyc18xID0gX192YWx1ZXMoX2ZpbmFsaXplcnMpLCBfZmluYWxpemVyc18xXzEgPSBfZmluYWxpemVyc18xLm5leHQoKTsgIV9maW5hbGl6ZXJzXzFfMS5kb25lOyBfZmluYWxpemVyc18xXzEgPSBfZmluYWxpemVyc18xLm5leHQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmluYWxpemVyID0gX2ZpbmFsaXplcnNfMV8xLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhlY0ZpbmFsaXplcihmaW5hbGl6ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IGVycm9ycyAhPT0gbnVsbCAmJiBlcnJvcnMgIT09IHZvaWQgMCA/IGVycm9ycyA6IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIFVuc3Vic2NyaXB0aW9uRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBfX3NwcmVhZEFycmF5KF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChlcnJvcnMpKSwgX19yZWFkKGVyci5lcnJvcnMpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZV8yXzEpIHsgZV8yID0geyBlcnJvcjogZV8yXzEgfTsgfVxyXG4gICAgICAgICAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9maW5hbGl6ZXJzXzFfMSAmJiAhX2ZpbmFsaXplcnNfMV8xLmRvbmUgJiYgKF9iID0gX2ZpbmFsaXplcnNfMS5yZXR1cm4pKSBfYi5jYWxsKF9maW5hbGl6ZXJzXzEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yOyB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGVycm9ycykge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFVuc3Vic2NyaXB0aW9uRXJyb3IoZXJyb3JzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uICh0ZWFyZG93bikge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICBpZiAodGVhcmRvd24gJiYgdGVhcmRvd24gIT09IHRoaXMpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XHJcbiAgICAgICAgICAgICAgICBleGVjRmluYWxpemVyKHRlYXJkb3duKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh0ZWFyZG93biBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZWFyZG93bi5jbG9zZWQgfHwgdGVhcmRvd24uX2hhc1BhcmVudCh0aGlzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRlYXJkb3duLl9hZGRQYXJlbnQodGhpcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAodGhpcy5fZmluYWxpemVycyA9IChfYSA9IHRoaXMuX2ZpbmFsaXplcnMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFtdKS5wdXNoKHRlYXJkb3duKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLl9oYXNQYXJlbnQgPSBmdW5jdGlvbiAocGFyZW50KSB7XHJcbiAgICAgICAgdmFyIF9wYXJlbnRhZ2UgPSB0aGlzLl9wYXJlbnRhZ2U7XHJcbiAgICAgICAgcmV0dXJuIF9wYXJlbnRhZ2UgPT09IHBhcmVudCB8fCAoQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSAmJiBfcGFyZW50YWdlLmluY2x1ZGVzKHBhcmVudCkpO1xyXG4gICAgfTtcclxuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuX2FkZFBhcmVudCA9IGZ1bmN0aW9uIChwYXJlbnQpIHtcclxuICAgICAgICB2YXIgX3BhcmVudGFnZSA9IHRoaXMuX3BhcmVudGFnZTtcclxuICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBBcnJheS5pc0FycmF5KF9wYXJlbnRhZ2UpID8gKF9wYXJlbnRhZ2UucHVzaChwYXJlbnQpLCBfcGFyZW50YWdlKSA6IF9wYXJlbnRhZ2UgPyBbX3BhcmVudGFnZSwgcGFyZW50XSA6IHBhcmVudDtcclxuICAgIH07XHJcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLl9yZW1vdmVQYXJlbnQgPSBmdW5jdGlvbiAocGFyZW50KSB7XHJcbiAgICAgICAgdmFyIF9wYXJlbnRhZ2UgPSB0aGlzLl9wYXJlbnRhZ2U7XHJcbiAgICAgICAgaWYgKF9wYXJlbnRhZ2UgPT09IHBhcmVudCkge1xyXG4gICAgICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KF9wYXJlbnRhZ2UpKSB7XHJcbiAgICAgICAgICAgIGFyclJlbW92ZShfcGFyZW50YWdlLCBwYXJlbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uICh0ZWFyZG93bikge1xyXG4gICAgICAgIHZhciBfZmluYWxpemVycyA9IHRoaXMuX2ZpbmFsaXplcnM7XHJcbiAgICAgICAgX2ZpbmFsaXplcnMgJiYgYXJyUmVtb3ZlKF9maW5hbGl6ZXJzLCB0ZWFyZG93bik7XHJcbiAgICAgICAgaWYgKHRlYXJkb3duIGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uKSB7XHJcbiAgICAgICAgICAgIHRlYXJkb3duLl9yZW1vdmVQYXJlbnQodGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFN1YnNjcmlwdGlvbi5FTVBUWSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGVtcHR5ID0gbmV3IFN1YnNjcmlwdGlvbigpO1xyXG4gICAgICAgIGVtcHR5LmNsb3NlZCA9IHRydWU7XHJcbiAgICAgICAgcmV0dXJuIGVtcHR5O1xyXG4gICAgfSkoKTtcclxuICAgIHJldHVybiBTdWJzY3JpcHRpb247XHJcbn0oKSk7XHJcbmV4cG9ydCB7IFN1YnNjcmlwdGlvbiB9O1xyXG5leHBvcnQgdmFyIEVNUFRZX1NVQlNDUklQVElPTiA9IFN1YnNjcmlwdGlvbi5FTVBUWTtcclxuZXhwb3J0IGZ1bmN0aW9uIGlzU3Vic2NyaXB0aW9uKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gKHZhbHVlIGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uIHx8XHJcbiAgICAgICAgKHZhbHVlICYmICdjbG9zZWQnIGluIHZhbHVlICYmIGlzRnVuY3Rpb24odmFsdWUucmVtb3ZlKSAmJiBpc0Z1bmN0aW9uKHZhbHVlLmFkZCkgJiYgaXNGdW5jdGlvbih2YWx1ZS51bnN1YnNjcmliZSkpKTtcclxufVxyXG5mdW5jdGlvbiBleGVjRmluYWxpemVyKGZpbmFsaXplcikge1xyXG4gICAgaWYgKGlzRnVuY3Rpb24oZmluYWxpemVyKSkge1xyXG4gICAgICAgIGZpbmFsaXplcigpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgZmluYWxpemVyLnVuc3Vic2NyaWJlKCk7XHJcbiAgICB9XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3Vic2NyaXB0aW9uLmpzLm1hcCIsImV4cG9ydCB2YXIgY29uZmlnID0ge1xyXG4gICAgb25VbmhhbmRsZWRFcnJvcjogbnVsbCxcclxuICAgIG9uU3RvcHBlZE5vdGlmaWNhdGlvbjogbnVsbCxcclxuICAgIFByb21pc2U6IHVuZGVmaW5lZCxcclxuICAgIHVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmc6IGZhbHNlLFxyXG4gICAgdXNlRGVwcmVjYXRlZE5leHRDb250ZXh0OiBmYWxzZSxcclxufTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uZmlnLmpzLm1hcCIsImltcG9ydCB7IF9fcmVhZCwgX19zcHJlYWRBcnJheSB9IGZyb20gXCJ0c2xpYlwiO1xyXG5leHBvcnQgdmFyIHRpbWVvdXRQcm92aWRlciA9IHtcclxuICAgIHNldFRpbWVvdXQ6IGZ1bmN0aW9uIChoYW5kbGVyLCB0aW1lb3V0KSB7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDI7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBhcmdzW19pIC0gMl0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgZGVsZWdhdGUgPSB0aW1lb3V0UHJvdmlkZXIuZGVsZWdhdGU7XHJcbiAgICAgICAgaWYgKGRlbGVnYXRlID09PSBudWxsIHx8IGRlbGVnYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWxlZ2F0ZS5zZXRUaW1lb3V0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZS5zZXRUaW1lb3V0LmFwcGx5KGRlbGVnYXRlLCBfX3NwcmVhZEFycmF5KFtoYW5kbGVyLCB0aW1lb3V0XSwgX19yZWFkKGFyZ3MpKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0LmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbaGFuZGxlciwgdGltZW91dF0sIF9fcmVhZChhcmdzKSkpO1xyXG4gICAgfSxcclxuICAgIGNsZWFyVGltZW91dDogZnVuY3Rpb24gKGhhbmRsZSkge1xyXG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IHRpbWVvdXRQcm92aWRlci5kZWxlZ2F0ZTtcclxuICAgICAgICByZXR1cm4gKChkZWxlZ2F0ZSA9PT0gbnVsbCB8fCBkZWxlZ2F0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVsZWdhdGUuY2xlYXJUaW1lb3V0KSB8fCBjbGVhclRpbWVvdXQpKGhhbmRsZSk7XHJcbiAgICB9LFxyXG4gICAgZGVsZWdhdGU6IHVuZGVmaW5lZCxcclxufTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZW91dFByb3ZpZGVyLmpzLm1hcCIsImltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZyc7XHJcbmltcG9ydCB7IHRpbWVvdXRQcm92aWRlciB9IGZyb20gJy4uL3NjaGVkdWxlci90aW1lb3V0UHJvdmlkZXInO1xyXG5leHBvcnQgZnVuY3Rpb24gcmVwb3J0VW5oYW5kbGVkRXJyb3IoZXJyKSB7XHJcbiAgICB0aW1lb3V0UHJvdmlkZXIuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIG9uVW5oYW5kbGVkRXJyb3IgPSBjb25maWcub25VbmhhbmRsZWRFcnJvcjtcclxuICAgICAgICBpZiAob25VbmhhbmRsZWRFcnJvcikge1xyXG4gICAgICAgICAgICBvblVuaGFuZGxlZEVycm9yKGVycik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVwb3J0VW5oYW5kbGVkRXJyb3IuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIG5vb3AoKSB7IH1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9vcC5qcy5tYXAiLCJleHBvcnQgdmFyIENPTVBMRVRFX05PVElGSUNBVElPTiA9IChmdW5jdGlvbiAoKSB7IHJldHVybiBjcmVhdGVOb3RpZmljYXRpb24oJ0MnLCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7IH0pKCk7XHJcbmV4cG9ydCBmdW5jdGlvbiBlcnJvck5vdGlmaWNhdGlvbihlcnJvcikge1xyXG4gICAgcmV0dXJuIGNyZWF0ZU5vdGlmaWNhdGlvbignRScsIHVuZGVmaW5lZCwgZXJyb3IpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBuZXh0Tm90aWZpY2F0aW9uKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gY3JlYXRlTm90aWZpY2F0aW9uKCdOJywgdmFsdWUsIHVuZGVmaW5lZCk7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU5vdGlmaWNhdGlvbihraW5kLCB2YWx1ZSwgZXJyb3IpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAga2luZDoga2luZCxcclxuICAgICAgICB2YWx1ZTogdmFsdWUsXHJcbiAgICAgICAgZXJyb3I6IGVycm9yLFxyXG4gICAgfTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1Ob3RpZmljYXRpb25GYWN0b3JpZXMuanMubWFwIiwiaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vY29uZmlnJztcclxudmFyIGNvbnRleHQgPSBudWxsO1xyXG5leHBvcnQgZnVuY3Rpb24gZXJyb3JDb250ZXh0KGNiKSB7XHJcbiAgICBpZiAoY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcclxuICAgICAgICB2YXIgaXNSb290ID0gIWNvbnRleHQ7XHJcbiAgICAgICAgaWYgKGlzUm9vdCkge1xyXG4gICAgICAgICAgICBjb250ZXh0ID0geyBlcnJvclRocm93bjogZmFsc2UsIGVycm9yOiBudWxsIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNiKCk7XHJcbiAgICAgICAgaWYgKGlzUm9vdCkge1xyXG4gICAgICAgICAgICB2YXIgX2EgPSBjb250ZXh0LCBlcnJvclRocm93biA9IF9hLmVycm9yVGhyb3duLCBlcnJvciA9IF9hLmVycm9yO1xyXG4gICAgICAgICAgICBjb250ZXh0ID0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKGVycm9yVGhyb3duKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGNiKCk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGNhcHR1cmVFcnJvcihlcnIpIHtcclxuICAgIGlmIChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZyAmJiBjb250ZXh0KSB7XHJcbiAgICAgICAgY29udGV4dC5lcnJvclRocm93biA9IHRydWU7XHJcbiAgICAgICAgY29udGV4dC5lcnJvciA9IGVycjtcclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvckNvbnRleHQuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL3V0aWwvaXNGdW5jdGlvbic7XHJcbmltcG9ydCB7IGlzU3Vic2NyaXB0aW9uLCBTdWJzY3JpcHRpb24gfSBmcm9tICcuL1N1YnNjcmlwdGlvbic7XHJcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcclxuaW1wb3J0IHsgcmVwb3J0VW5oYW5kbGVkRXJyb3IgfSBmcm9tICcuL3V0aWwvcmVwb3J0VW5oYW5kbGVkRXJyb3InO1xyXG5pbXBvcnQgeyBub29wIH0gZnJvbSAnLi91dGlsL25vb3AnO1xyXG5pbXBvcnQgeyBuZXh0Tm90aWZpY2F0aW9uLCBlcnJvck5vdGlmaWNhdGlvbiwgQ09NUExFVEVfTk9USUZJQ0FUSU9OIH0gZnJvbSAnLi9Ob3RpZmljYXRpb25GYWN0b3JpZXMnO1xyXG5pbXBvcnQgeyB0aW1lb3V0UHJvdmlkZXIgfSBmcm9tICcuL3NjaGVkdWxlci90aW1lb3V0UHJvdmlkZXInO1xyXG5pbXBvcnQgeyBjYXB0dXJlRXJyb3IgfSBmcm9tICcuL3V0aWwvZXJyb3JDb250ZXh0JztcclxudmFyIFN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKFN1YnNjcmliZXIsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBTdWJzY3JpYmVyKGRlc3RpbmF0aW9uKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5pc1N0b3BwZWQgPSBmYWxzZTtcclxuICAgICAgICBpZiAoZGVzdGluYXRpb24pIHtcclxuICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbjtcclxuICAgICAgICAgICAgaWYgKGlzU3Vic2NyaXB0aW9uKGRlc3RpbmF0aW9uKSkge1xyXG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb24uYWRkKF90aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBFTVBUWV9PQlNFUlZFUjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgU3Vic2NyaWJlci5jcmVhdGUgPSBmdW5jdGlvbiAobmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTYWZlU3Vic2NyaWJlcihuZXh0LCBlcnJvciwgY29tcGxldGUpO1xyXG4gICAgfTtcclxuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICBpZiAodGhpcy5pc1N0b3BwZWQpIHtcclxuICAgICAgICAgICAgaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbihuZXh0Tm90aWZpY2F0aW9uKHZhbHVlKSwgdGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9uZXh0KHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XHJcbiAgICAgICAgICAgIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24oZXJyb3JOb3RpZmljYXRpb24oZXJyKSwgdGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yKGVycik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzU3RvcHBlZCkge1xyXG4gICAgICAgICAgICBoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uKENPTVBMRVRFX05PVElGSUNBVElPTiwgdGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuX2NvbXBsZXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5jbG9zZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24gPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XHJcbiAgICB9O1xyXG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFN1YnNjcmliZXI7XHJcbn0oU3Vic2NyaXB0aW9uKSk7XHJcbmV4cG9ydCB7IFN1YnNjcmliZXIgfTtcclxudmFyIF9iaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQ7XHJcbmZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcclxuICAgIHJldHVybiBfYmluZC5jYWxsKGZuLCB0aGlzQXJnKTtcclxufVxyXG52YXIgQ29uc3VtZXJPYnNlcnZlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBDb25zdW1lck9ic2VydmVyKHBhcnRpYWxPYnNlcnZlcikge1xyXG4gICAgICAgIHRoaXMucGFydGlhbE9ic2VydmVyID0gcGFydGlhbE9ic2VydmVyO1xyXG4gICAgfVxyXG4gICAgQ29uc3VtZXJPYnNlcnZlci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIHZhciBwYXJ0aWFsT2JzZXJ2ZXIgPSB0aGlzLnBhcnRpYWxPYnNlcnZlcjtcclxuICAgICAgICBpZiAocGFydGlhbE9ic2VydmVyLm5leHQpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlci5uZXh0KHZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycm9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBDb25zdW1lck9ic2VydmVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICB2YXIgcGFydGlhbE9ic2VydmVyID0gdGhpcy5wYXJ0aWFsT2JzZXJ2ZXI7XHJcbiAgICAgICAgaWYgKHBhcnRpYWxPYnNlcnZlci5lcnJvcikge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyLmVycm9yKGVycik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVVbmhhbmRsZWRFcnJvcihlcnJvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIENvbnN1bWVyT2JzZXJ2ZXIucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBwYXJ0aWFsT2JzZXJ2ZXIgPSB0aGlzLnBhcnRpYWxPYnNlcnZlcjtcclxuICAgICAgICBpZiAocGFydGlhbE9ic2VydmVyLmNvbXBsZXRlKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIuY29tcGxldGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycm9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gQ29uc3VtZXJPYnNlcnZlcjtcclxufSgpKTtcclxudmFyIFNhZmVTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhTYWZlU3Vic2NyaWJlciwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFNhZmVTdWJzY3JpYmVyKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xyXG4gICAgICAgIHZhciBwYXJ0aWFsT2JzZXJ2ZXI7XHJcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24ob2JzZXJ2ZXJPck5leHQpIHx8ICFvYnNlcnZlck9yTmV4dCkge1xyXG4gICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIgPSB7XHJcbiAgICAgICAgICAgICAgICBuZXh0OiAob2JzZXJ2ZXJPck5leHQgIT09IG51bGwgJiYgb2JzZXJ2ZXJPck5leHQgIT09IHZvaWQgMCA/IG9ic2VydmVyT3JOZXh0IDogdW5kZWZpbmVkKSxcclxuICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvciAhPT0gbnVsbCAmJiBlcnJvciAhPT0gdm9pZCAwID8gZXJyb3IgOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZTogY29tcGxldGUgIT09IG51bGwgJiYgY29tcGxldGUgIT09IHZvaWQgMCA/IGNvbXBsZXRlIDogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGNvbnRleHRfMTtcclxuICAgICAgICAgICAgaWYgKF90aGlzICYmIGNvbmZpZy51c2VEZXByZWNhdGVkTmV4dENvbnRleHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHRfMSA9IE9iamVjdC5jcmVhdGUob2JzZXJ2ZXJPck5leHQpO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dF8xLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMudW5zdWJzY3JpYmUoKTsgfTtcclxuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlciA9IHtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0OiBvYnNlcnZlck9yTmV4dC5uZXh0ICYmIGJpbmQob2JzZXJ2ZXJPck5leHQubmV4dCwgY29udGV4dF8xKSxcclxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogb2JzZXJ2ZXJPck5leHQuZXJyb3IgJiYgYmluZChvYnNlcnZlck9yTmV4dC5lcnJvciwgY29udGV4dF8xKSxcclxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogb2JzZXJ2ZXJPck5leHQuY29tcGxldGUgJiYgYmluZChvYnNlcnZlck9yTmV4dC5jb21wbGV0ZSwgY29udGV4dF8xKSxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIgPSBvYnNlcnZlck9yTmV4dDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IG5ldyBDb25zdW1lck9ic2VydmVyKHBhcnRpYWxPYnNlcnZlcik7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFNhZmVTdWJzY3JpYmVyO1xyXG59KFN1YnNjcmliZXIpKTtcclxuZXhwb3J0IHsgU2FmZVN1YnNjcmliZXIgfTtcclxuZnVuY3Rpb24gaGFuZGxlVW5oYW5kbGVkRXJyb3IoZXJyb3IpIHtcclxuICAgIGlmIChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xyXG4gICAgICAgIGNhcHR1cmVFcnJvcihlcnJvcik7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXBvcnRVbmhhbmRsZWRFcnJvcihlcnJvcik7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZGVmYXVsdEVycm9ySGFuZGxlcihlcnIpIHtcclxuICAgIHRocm93IGVycjtcclxufVxyXG5mdW5jdGlvbiBoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbiwgc3Vic2NyaWJlcikge1xyXG4gICAgdmFyIG9uU3RvcHBlZE5vdGlmaWNhdGlvbiA9IGNvbmZpZy5vblN0b3BwZWROb3RpZmljYXRpb247XHJcbiAgICBvblN0b3BwZWROb3RpZmljYXRpb24gJiYgdGltZW91dFByb3ZpZGVyLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gb25TdG9wcGVkTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbiwgc3Vic2NyaWJlcik7IH0pO1xyXG59XHJcbmV4cG9ydCB2YXIgRU1QVFlfT0JTRVJWRVIgPSB7XHJcbiAgICBjbG9zZWQ6IHRydWUsXHJcbiAgICBuZXh0OiBub29wLFxyXG4gICAgZXJyb3I6IGRlZmF1bHRFcnJvckhhbmRsZXIsXHJcbiAgICBjb21wbGV0ZTogbm9vcCxcclxufTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3Vic2NyaWJlci5qcy5tYXAiLCJleHBvcnQgdmFyIG9ic2VydmFibGUgPSAoZnVuY3Rpb24gKCkgeyByZXR1cm4gKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLm9ic2VydmFibGUpIHx8ICdAQG9ic2VydmFibGUnOyB9KSgpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYnNlcnZhYmxlLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eSh4KSB7XHJcbiAgICByZXR1cm4geDtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pZGVudGl0eS5qcy5tYXAiLCJpbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4vaWRlbnRpdHknO1xyXG5leHBvcnQgZnVuY3Rpb24gcGlwZSgpIHtcclxuICAgIHZhciBmbnMgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgZm5zW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcGlwZUZyb21BcnJheShmbnMpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBwaXBlRnJvbUFycmF5KGZucykge1xyXG4gICAgaWYgKGZucy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm4gaWRlbnRpdHk7XHJcbiAgICB9XHJcbiAgICBpZiAoZm5zLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgIHJldHVybiBmbnNbMF07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gcGlwZWQoaW5wdXQpIHtcclxuICAgICAgICByZXR1cm4gZm5zLnJlZHVjZShmdW5jdGlvbiAocHJldiwgZm4pIHsgcmV0dXJuIGZuKHByZXYpOyB9LCBpbnB1dCk7XHJcbiAgICB9O1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBpcGUuanMubWFwIiwiaW1wb3J0IHsgU2FmZVN1YnNjcmliZXIsIFN1YnNjcmliZXIgfSBmcm9tICcuL1N1YnNjcmliZXInO1xyXG5pbXBvcnQgeyBpc1N1YnNjcmlwdGlvbiB9IGZyb20gJy4vU3Vic2NyaXB0aW9uJztcclxuaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBTeW1ib2xfb2JzZXJ2YWJsZSB9IGZyb20gJy4vc3ltYm9sL29ic2VydmFibGUnO1xyXG5pbXBvcnQgeyBwaXBlRnJvbUFycmF5IH0gZnJvbSAnLi91dGlsL3BpcGUnO1xyXG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XHJcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL3V0aWwvaXNGdW5jdGlvbic7XHJcbmltcG9ydCB7IGVycm9yQ29udGV4dCB9IGZyb20gJy4vdXRpbC9lcnJvckNvbnRleHQnO1xyXG52YXIgT2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBPYnNlcnZhYmxlKHN1YnNjcmliZSkge1xyXG4gICAgICAgIGlmIChzdWJzY3JpYmUpIHtcclxuICAgICAgICAgICAgdGhpcy5fc3Vic2NyaWJlID0gc3Vic2NyaWJlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIE9ic2VydmFibGUucHJvdG90eXBlLmxpZnQgPSBmdW5jdGlvbiAob3BlcmF0b3IpIHtcclxuICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlKCk7XHJcbiAgICAgICAgb2JzZXJ2YWJsZS5zb3VyY2UgPSB0aGlzO1xyXG4gICAgICAgIG9ic2VydmFibGUub3BlcmF0b3IgPSBvcGVyYXRvcjtcclxuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZTtcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiAob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHN1YnNjcmliZXIgPSBpc1N1YnNjcmliZXIob2JzZXJ2ZXJPck5leHQpID8gb2JzZXJ2ZXJPck5leHQgOiBuZXcgU2FmZVN1YnNjcmliZXIob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSk7XHJcbiAgICAgICAgZXJyb3JDb250ZXh0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMsIG9wZXJhdG9yID0gX2Eub3BlcmF0b3IsIHNvdXJjZSA9IF9hLnNvdXJjZTtcclxuICAgICAgICAgICAgc3Vic2NyaWJlci5hZGQob3BlcmF0b3JcclxuICAgICAgICAgICAgICAgID9cclxuICAgICAgICAgICAgICAgICAgICBvcGVyYXRvci5jYWxsKHN1YnNjcmliZXIsIHNvdXJjZSlcclxuICAgICAgICAgICAgICAgIDogc291cmNlXHJcbiAgICAgICAgICAgICAgICAgICAgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fc3Vic2NyaWJlKHN1YnNjcmliZXIpXHJcbiAgICAgICAgICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fdHJ5U3Vic2NyaWJlKHN1YnNjcmliZXIpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gc3Vic2NyaWJlcjtcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5fdHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gKHNpbmspIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3Vic2NyaWJlKHNpbmspO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIHNpbmsuZXJyb3IoZXJyKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChuZXh0LCBwcm9taXNlQ3Rvcikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcHJvbWlzZUN0b3IgPSBnZXRQcm9taXNlQ3Rvcihwcm9taXNlQ3Rvcik7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBwcm9taXNlQ3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIHZhciBzdWJzY3JpYmVyID0gbmV3IFNhZmVTdWJzY3JpYmVyKHtcclxuICAgICAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVycm9yOiByZWplY3QsXHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZTogcmVzb2x2ZSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIF90aGlzLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgcmV0dXJuIChfYSA9IHRoaXMuc291cmNlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xyXG4gICAgfTtcclxuICAgIE9ic2VydmFibGUucHJvdG90eXBlW1N5bWJvbF9vYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBvcGVyYXRpb25zID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgb3BlcmF0aW9uc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcGlwZUZyb21BcnJheShvcGVyYXRpb25zKSh0aGlzKTtcclxuICAgIH07XHJcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS50b1Byb21pc2UgPSBmdW5jdGlvbiAocHJvbWlzZUN0b3IpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHByb21pc2VDdG9yID0gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpO1xyXG4gICAgICAgIHJldHVybiBuZXcgcHJvbWlzZUN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICB2YXIgdmFsdWU7XHJcbiAgICAgICAgICAgIF90aGlzLnN1YnNjcmliZShmdW5jdGlvbiAoeCkgeyByZXR1cm4gKHZhbHVlID0geCk7IH0sIGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIHJlamVjdChlcnIpOyB9LCBmdW5jdGlvbiAoKSB7IHJldHVybiByZXNvbHZlKHZhbHVlKTsgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKHN1YnNjcmliZSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE9ic2VydmFibGU7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IE9ic2VydmFibGUgfTtcclxuZnVuY3Rpb24gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpIHtcclxuICAgIHZhciBfYTtcclxuICAgIHJldHVybiAoX2EgPSBwcm9taXNlQ3RvciAhPT0gbnVsbCAmJiBwcm9taXNlQ3RvciAhPT0gdm9pZCAwID8gcHJvbWlzZUN0b3IgOiBjb25maWcuUHJvbWlzZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogUHJvbWlzZTtcclxufVxyXG5mdW5jdGlvbiBpc09ic2VydmVyKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gdmFsdWUgJiYgaXNGdW5jdGlvbih2YWx1ZS5uZXh0KSAmJiBpc0Z1bmN0aW9uKHZhbHVlLmVycm9yKSAmJiBpc0Z1bmN0aW9uKHZhbHVlLmNvbXBsZXRlKTtcclxufVxyXG5mdW5jdGlvbiBpc1N1YnNjcmliZXIodmFsdWUpIHtcclxuICAgIHJldHVybiAodmFsdWUgJiYgdmFsdWUgaW5zdGFuY2VvZiBTdWJzY3JpYmVyKSB8fCAoaXNPYnNlcnZlcih2YWx1ZSkgJiYgaXNTdWJzY3JpcHRpb24odmFsdWUpKTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1PYnNlcnZhYmxlLmpzLm1hcCIsImltcG9ydCB7IG9ic2VydmFibGUgYXMgU3ltYm9sX29ic2VydmFibGUgfSBmcm9tICcuLi9zeW1ib2wvb2JzZXJ2YWJsZSc7XHJcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xyXG5leHBvcnQgZnVuY3Rpb24gaXNJbnRlcm9wT2JzZXJ2YWJsZShpbnB1dCkge1xyXG4gICAgcmV0dXJuIGlzRnVuY3Rpb24oaW5wdXRbU3ltYm9sX29ic2VydmFibGVdKTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0ludGVyb3BPYnNlcnZhYmxlLmpzLm1hcCIsImltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xyXG5leHBvcnQgZnVuY3Rpb24gaXNBc3luY0l0ZXJhYmxlKG9iaikge1xyXG4gICAgcmV0dXJuIFN5bWJvbC5hc3luY0l0ZXJhdG9yICYmIGlzRnVuY3Rpb24ob2JqID09PSBudWxsIHx8IG9iaiA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNBc3luY0l0ZXJhYmxlLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvcihpbnB1dCkge1xyXG4gICAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoXCJZb3UgcHJvdmlkZWQgXCIgKyAoaW5wdXQgIT09IG51bGwgJiYgdHlwZW9mIGlucHV0ID09PSAnb2JqZWN0JyA/ICdhbiBpbnZhbGlkIG9iamVjdCcgOiBcIidcIiArIGlucHV0ICsgXCInXCIpICsgXCIgd2hlcmUgYSBzdHJlYW0gd2FzIGV4cGVjdGVkLiBZb3UgY2FuIHByb3ZpZGUgYW4gT2JzZXJ2YWJsZSwgUHJvbWlzZSwgUmVhZGFibGVTdHJlYW0sIEFycmF5LCBBc3luY0l0ZXJhYmxlLCBvciBJdGVyYWJsZS5cIik7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGhyb3dVbm9ic2VydmFibGVFcnJvci5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gZ2V0U3ltYm9sSXRlcmF0b3IoKSB7XHJcbiAgICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ2Z1bmN0aW9uJyB8fCAhU3ltYm9sLml0ZXJhdG9yKSB7XHJcbiAgICAgICAgcmV0dXJuICdAQGl0ZXJhdG9yJztcclxuICAgIH1cclxuICAgIHJldHVybiBTeW1ib2wuaXRlcmF0b3I7XHJcbn1cclxuZXhwb3J0IHZhciBpdGVyYXRvciA9IGdldFN5bWJvbEl0ZXJhdG9yKCk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWl0ZXJhdG9yLmpzLm1hcCIsImltcG9ydCB7IGl0ZXJhdG9yIGFzIFN5bWJvbF9pdGVyYXRvciB9IGZyb20gJy4uL3N5bWJvbC9pdGVyYXRvcic7XHJcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xyXG5leHBvcnQgZnVuY3Rpb24gaXNJdGVyYWJsZShpbnB1dCkge1xyXG4gICAgcmV0dXJuIGlzRnVuY3Rpb24oaW5wdXQgPT09IG51bGwgfHwgaW5wdXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGlucHV0W1N5bWJvbF9pdGVyYXRvcl0pO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzSXRlcmFibGUuanMubWFwIiwiaW1wb3J0IHsgX19hc3luY0dlbmVyYXRvciwgX19hd2FpdCwgX19nZW5lcmF0b3IgfSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XHJcbmV4cG9ydCBmdW5jdGlvbiByZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yKHJlYWRhYmxlU3RyZWFtKSB7XHJcbiAgICByZXR1cm4gX19hc3luY0dlbmVyYXRvcih0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uIHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3JfMSgpIHtcclxuICAgICAgICB2YXIgcmVhZGVyLCBfYSwgdmFsdWUsIGRvbmU7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyID0gcmVhZGFibGVTdHJlYW0uZ2V0UmVhZGVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAxO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIF9iLnRyeXMucHVzaChbMSwgLCA5LCAxMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMjtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRydWUpIHJldHVybiBbMywgOF07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBfX2F3YWl0KHJlYWRlci5yZWFkKCkpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICBfYSA9IF9iLnNlbnQoKSwgdmFsdWUgPSBfYS52YWx1ZSwgZG9uZSA9IF9hLmRvbmU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkb25lKSByZXR1cm4gWzMsIDVdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgX19hd2FpdCh2b2lkIDApXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyLCBfYi5zZW50KCldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzQsIF9fYXdhaXQodmFsdWUpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNjogcmV0dXJuIFs0LCBfYi5zZW50KCldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OlxyXG4gICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMsIDJdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA4OiByZXR1cm4gWzMsIDEwXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgOTpcclxuICAgICAgICAgICAgICAgICAgICByZWFkZXIucmVsZWFzZUxvY2soKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzddO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxMDogcmV0dXJuIFsyXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGlzUmVhZGFibGVTdHJlYW1MaWtlKG9iaikge1xyXG4gICAgcmV0dXJuIGlzRnVuY3Rpb24ob2JqID09PSBudWxsIHx8IG9iaiA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JqLmdldFJlYWRlcik7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNSZWFkYWJsZVN0cmVhbUxpa2UuanMubWFwIiwiaW1wb3J0IHsgX19hc3luY1ZhbHVlcywgX19hd2FpdGVyLCBfX2dlbmVyYXRvciwgX192YWx1ZXMgfSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgaXNBcnJheUxpa2UgfSBmcm9tICcuLi91dGlsL2lzQXJyYXlMaWtlJztcclxuaW1wb3J0IHsgaXNQcm9taXNlIH0gZnJvbSAnLi4vdXRpbC9pc1Byb21pc2UnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XHJcbmltcG9ydCB7IGlzSW50ZXJvcE9ic2VydmFibGUgfSBmcm9tICcuLi91dGlsL2lzSW50ZXJvcE9ic2VydmFibGUnO1xyXG5pbXBvcnQgeyBpc0FzeW5jSXRlcmFibGUgfSBmcm9tICcuLi91dGlsL2lzQXN5bmNJdGVyYWJsZSc7XHJcbmltcG9ydCB7IGNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yIH0gZnJvbSAnLi4vdXRpbC90aHJvd1Vub2JzZXJ2YWJsZUVycm9yJztcclxuaW1wb3J0IHsgaXNJdGVyYWJsZSB9IGZyb20gJy4uL3V0aWwvaXNJdGVyYWJsZSc7XHJcbmltcG9ydCB7IGlzUmVhZGFibGVTdHJlYW1MaWtlLCByZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yIH0gZnJvbSAnLi4vdXRpbC9pc1JlYWRhYmxlU3RyZWFtTGlrZSc7XHJcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi91dGlsL2lzRnVuY3Rpb24nO1xyXG5pbXBvcnQgeyByZXBvcnRVbmhhbmRsZWRFcnJvciB9IGZyb20gJy4uL3V0aWwvcmVwb3J0VW5oYW5kbGVkRXJyb3InO1xyXG5pbXBvcnQgeyBvYnNlcnZhYmxlIGFzIFN5bWJvbF9vYnNlcnZhYmxlIH0gZnJvbSAnLi4vc3ltYm9sL29ic2VydmFibGUnO1xyXG5leHBvcnQgZnVuY3Rpb24gaW5uZXJGcm9tKGlucHV0KSB7XHJcbiAgICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBPYnNlcnZhYmxlKSB7XHJcbiAgICAgICAgcmV0dXJuIGlucHV0O1xyXG4gICAgfVxyXG4gICAgaWYgKGlucHV0ICE9IG51bGwpIHtcclxuICAgICAgICBpZiAoaXNJbnRlcm9wT2JzZXJ2YWJsZShpbnB1dCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZyb21JbnRlcm9wT2JzZXJ2YWJsZShpbnB1dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpc0FycmF5TGlrZShpbnB1dCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UoaW5wdXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNQcm9taXNlKGlucHV0KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZnJvbVByb21pc2UoaW5wdXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNBc3luY0l0ZXJhYmxlKGlucHV0KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZnJvbUFzeW5jSXRlcmFibGUoaW5wdXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNJdGVyYWJsZShpbnB1dCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZyb21JdGVyYWJsZShpbnB1dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpc1JlYWRhYmxlU3RyZWFtTGlrZShpbnB1dCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZyb21SZWFkYWJsZVN0cmVhbUxpa2UoaW5wdXQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHRocm93IGNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yKGlucHV0KTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gZnJvbUludGVyb3BPYnNlcnZhYmxlKG9iaikge1xyXG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XHJcbiAgICAgICAgdmFyIG9icyA9IG9ialtTeW1ib2xfb2JzZXJ2YWJsZV0oKTtcclxuICAgICAgICBpZiAoaXNGdW5jdGlvbihvYnMuc3Vic2NyaWJlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gb2JzLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUHJvdmlkZWQgb2JqZWN0IGRvZXMgbm90IGNvcnJlY3RseSBpbXBsZW1lbnQgU3ltYm9sLm9ic2VydmFibGUnKTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBmcm9tQXJyYXlMaWtlKGFycmF5KSB7XHJcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aCAmJiAhc3Vic2NyaWJlci5jbG9zZWQ7IGkrKykge1xyXG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoYXJyYXlbaV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gZnJvbVByb21pc2UocHJvbWlzZSkge1xyXG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XHJcbiAgICAgICAgcHJvbWlzZVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKCFzdWJzY3JpYmVyLmNsb3NlZCkge1xyXG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIHN1YnNjcmliZXIuZXJyb3IoZXJyKTsgfSlcclxuICAgICAgICAgICAgLnRoZW4obnVsbCwgcmVwb3J0VW5oYW5kbGVkRXJyb3IpO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGZyb21JdGVyYWJsZShpdGVyYWJsZSkge1xyXG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XHJcbiAgICAgICAgdmFyIGVfMSwgX2E7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaXRlcmFibGVfMSA9IF9fdmFsdWVzKGl0ZXJhYmxlKSwgaXRlcmFibGVfMV8xID0gaXRlcmFibGVfMS5uZXh0KCk7ICFpdGVyYWJsZV8xXzEuZG9uZTsgaXRlcmFibGVfMV8xID0gaXRlcmFibGVfMS5uZXh0KCkpIHtcclxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGl0ZXJhYmxlXzFfMS52YWx1ZTtcclxuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaWJlci5jbG9zZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cclxuICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGlmIChpdGVyYWJsZV8xXzEgJiYgIWl0ZXJhYmxlXzFfMS5kb25lICYmIChfYSA9IGl0ZXJhYmxlXzEucmV0dXJuKSkgX2EuY2FsbChpdGVyYWJsZV8xKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBmcm9tQXN5bmNJdGVyYWJsZShhc3luY0l0ZXJhYmxlKSB7XHJcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcclxuICAgICAgICBwcm9jZXNzKGFzeW5jSXRlcmFibGUsIHN1YnNjcmliZXIpLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIHN1YnNjcmliZXIuZXJyb3IoZXJyKTsgfSk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gZnJvbVJlYWRhYmxlU3RyZWFtTGlrZShyZWFkYWJsZVN0cmVhbSkge1xyXG4gICAgcmV0dXJuIGZyb21Bc3luY0l0ZXJhYmxlKHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IocmVhZGFibGVTdHJlYW0pKTtcclxufVxyXG5mdW5jdGlvbiBwcm9jZXNzKGFzeW5jSXRlcmFibGUsIHN1YnNjcmliZXIpIHtcclxuICAgIHZhciBhc3luY0l0ZXJhYmxlXzEsIGFzeW5jSXRlcmFibGVfMV8xO1xyXG4gICAgdmFyIGVfMiwgX2E7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHZhbHVlLCBlXzJfMTtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBfYi50cnlzLnB1c2goWzAsIDUsIDYsIDExXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXN5bmNJdGVyYWJsZV8xID0gX19hc3luY1ZhbHVlcyhhc3luY0l0ZXJhYmxlKTtcclxuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDE7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBbNCwgYXN5bmNJdGVyYWJsZV8xLm5leHQoKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoYXN5bmNJdGVyYWJsZV8xXzEgPSBfYi5zZW50KCksICFhc3luY0l0ZXJhYmxlXzFfMS5kb25lKSkgcmV0dXJuIFszLCA0XTtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGFzeW5jSXRlcmFibGVfMV8xLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1YnNjcmliZXIuY2xvc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMl07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMztcclxuICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFszLCAxXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFszLCAxMV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgICAgICAgICAgZV8yXzEgPSBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZV8yID0geyBlcnJvcjogZV8yXzEgfTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMsIDExXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNjpcclxuICAgICAgICAgICAgICAgICAgICBfYi50cnlzLnB1c2goWzYsICwgOSwgMTBdKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIShhc3luY0l0ZXJhYmxlXzFfMSAmJiAhYXN5bmNJdGVyYWJsZV8xXzEuZG9uZSAmJiAoX2EgPSBhc3luY0l0ZXJhYmxlXzEucmV0dXJuKSkpIHJldHVybiBbMywgOF07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBfYS5jYWxsKGFzeW5jSXRlcmFibGVfMSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OlxyXG4gICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDg7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDg6IHJldHVybiBbMywgMTBdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA5OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlXzIpIHRocm93IGVfMi5lcnJvcjtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzddO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxMDogcmV0dXJuIFs3XTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTE6XHJcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMl07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlubmVyRnJvbS5qcy5tYXAiLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcclxuZXhwb3J0IGZ1bmN0aW9uIGhhc0xpZnQoc291cmNlKSB7XHJcbiAgICByZXR1cm4gaXNGdW5jdGlvbihzb3VyY2UgPT09IG51bGwgfHwgc291cmNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzb3VyY2UubGlmdCk7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIG9wZXJhdGUoaW5pdCkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHtcclxuICAgICAgICBpZiAoaGFzTGlmdChzb3VyY2UpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2UubGlmdChmdW5jdGlvbiAobGlmdGVkU291cmNlKSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpbml0KGxpZnRlZFNvdXJjZSwgdGhpcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvcihlcnIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5hYmxlIHRvIGxpZnQgdW5rbm93biBPYnNlcnZhYmxlIHR5cGUnKTtcclxuICAgIH07XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGlmdC5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBvbk5leHQsIG9uQ29tcGxldGUsIG9uRXJyb3IsIG9uRmluYWxpemUpIHtcclxuICAgIHJldHVybiBuZXcgT3BlcmF0b3JTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBvbk5leHQsIG9uQ29tcGxldGUsIG9uRXJyb3IsIG9uRmluYWxpemUpO1xyXG59XHJcbnZhciBPcGVyYXRvclN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKE9wZXJhdG9yU3Vic2NyaWJlciwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIE9wZXJhdG9yU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgb25OZXh0LCBvbkNvbXBsZXRlLCBvbkVycm9yLCBvbkZpbmFsaXplLCBzaG91bGRVbnN1YnNjcmliZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLm9uRmluYWxpemUgPSBvbkZpbmFsaXplO1xyXG4gICAgICAgIF90aGlzLnNob3VsZFVuc3Vic2NyaWJlID0gc2hvdWxkVW5zdWJzY3JpYmU7XHJcbiAgICAgICAgX3RoaXMuX25leHQgPSBvbk5leHRcclxuICAgICAgICAgICAgPyBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb25OZXh0KHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIDogX3N1cGVyLnByb3RvdHlwZS5fbmV4dDtcclxuICAgICAgICBfdGhpcy5fZXJyb3IgPSBvbkVycm9yXHJcbiAgICAgICAgICAgID8gZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKGVycik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICA6IF9zdXBlci5wcm90b3R5cGUuX2Vycm9yO1xyXG4gICAgICAgIF90aGlzLl9jb21wbGV0ZSA9IG9uQ29tcGxldGVcclxuICAgICAgICAgICAgPyBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9uQ29tcGxldGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIDogX3N1cGVyLnByb3RvdHlwZS5fY29tcGxldGU7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgT3BlcmF0b3JTdWJzY3JpYmVyLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgaWYgKCF0aGlzLnNob3VsZFVuc3Vic2NyaWJlIHx8IHRoaXMuc2hvdWxkVW5zdWJzY3JpYmUoKSkge1xyXG4gICAgICAgICAgICB2YXIgY2xvc2VkXzEgPSB0aGlzLmNsb3NlZDtcclxuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICAhY2xvc2VkXzEgJiYgKChfYSA9IHRoaXMub25GaW5hbGl6ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwodGhpcykpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gT3BlcmF0b3JTdWJzY3JpYmVyO1xyXG59KFN1YnNjcmliZXIpKTtcclxuZXhwb3J0IHsgT3BlcmF0b3JTdWJzY3JpYmVyIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9wZXJhdG9yU3Vic2NyaWJlci5qcy5tYXAiLCJpbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcclxuaW1wb3J0IHsgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xyXG5leHBvcnQgZnVuY3Rpb24gbWFwKHByb2plY3QsIHRoaXNBcmcpIHtcclxuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcclxuICAgICAgICB2YXIgaW5kZXggPSAwO1xyXG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQocHJvamVjdC5jYWxsKHRoaXNBcmcsIHZhbHVlLCBpbmRleCsrKSk7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgfSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBleGVjdXRlU2NoZWR1bGUocGFyZW50U3Vic2NyaXB0aW9uLCBzY2hlZHVsZXIsIHdvcmssIGRlbGF5LCByZXBlYXQpIHtcclxuICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxyXG4gICAgaWYgKHJlcGVhdCA9PT0gdm9pZCAwKSB7IHJlcGVhdCA9IGZhbHNlOyB9XHJcbiAgICB2YXIgc2NoZWR1bGVTdWJzY3JpcHRpb24gPSBzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHdvcmsoKTtcclxuICAgICAgICBpZiAocmVwZWF0KSB7XHJcbiAgICAgICAgICAgIHBhcmVudFN1YnNjcmlwdGlvbi5hZGQodGhpcy5zY2hlZHVsZShudWxsLCBkZWxheSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH0sIGRlbGF5KTtcclxuICAgIHBhcmVudFN1YnNjcmlwdGlvbi5hZGQoc2NoZWR1bGVTdWJzY3JpcHRpb24pO1xyXG4gICAgaWYgKCFyZXBlYXQpIHtcclxuICAgICAgICByZXR1cm4gc2NoZWR1bGVTdWJzY3JpcHRpb247XHJcbiAgICB9XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhlY3V0ZVNjaGVkdWxlLmpzLm1hcCIsImltcG9ydCB7IG1hcCB9IGZyb20gJy4vbWFwJztcclxuaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9pbm5lckZyb20nO1xyXG5pbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcclxuaW1wb3J0IHsgbWVyZ2VJbnRlcm5hbHMgfSBmcm9tICcuL21lcmdlSW50ZXJuYWxzJztcclxuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWwvaXNGdW5jdGlvbic7XHJcbmV4cG9ydCBmdW5jdGlvbiBtZXJnZU1hcChwcm9qZWN0LCByZXN1bHRTZWxlY3RvciwgY29uY3VycmVudCkge1xyXG4gICAgaWYgKGNvbmN1cnJlbnQgPT09IHZvaWQgMCkgeyBjb25jdXJyZW50ID0gSW5maW5pdHk7IH1cclxuICAgIGlmIChpc0Z1bmN0aW9uKHJlc3VsdFNlbGVjdG9yKSkge1xyXG4gICAgICAgIHJldHVybiBtZXJnZU1hcChmdW5jdGlvbiAoYSwgaSkgeyByZXR1cm4gbWFwKGZ1bmN0aW9uIChiLCBpaSkgeyByZXR1cm4gcmVzdWx0U2VsZWN0b3IoYSwgYiwgaSwgaWkpOyB9KShpbm5lckZyb20ocHJvamVjdChhLCBpKSkpOyB9LCBjb25jdXJyZW50KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHR5cGVvZiByZXN1bHRTZWxlY3RvciA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICBjb25jdXJyZW50ID0gcmVzdWx0U2VsZWN0b3I7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7IHJldHVybiBtZXJnZUludGVybmFscyhzb3VyY2UsIHN1YnNjcmliZXIsIHByb2plY3QsIGNvbmN1cnJlbnQpOyB9KTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZU1hcC5qcy5tYXAiLCJpbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XHJcbmltcG9ydCB7IGV4ZWN1dGVTY2hlZHVsZSB9IGZyb20gJy4uL3V0aWwvZXhlY3V0ZVNjaGVkdWxlJztcclxuaW1wb3J0IHsgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xyXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VJbnRlcm5hbHMoc291cmNlLCBzdWJzY3JpYmVyLCBwcm9qZWN0LCBjb25jdXJyZW50LCBvbkJlZm9yZU5leHQsIGV4cGFuZCwgaW5uZXJTdWJTY2hlZHVsZXIsIGFkZGl0aW9uYWxGaW5hbGl6ZXIpIHtcclxuICAgIHZhciBidWZmZXIgPSBbXTtcclxuICAgIHZhciBhY3RpdmUgPSAwO1xyXG4gICAgdmFyIGluZGV4ID0gMDtcclxuICAgIHZhciBpc0NvbXBsZXRlID0gZmFsc2U7XHJcbiAgICB2YXIgY2hlY2tDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoaXNDb21wbGV0ZSAmJiAhYnVmZmVyLmxlbmd0aCAmJiAhYWN0aXZlKSB7XHJcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgdmFyIG91dGVyTmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gKGFjdGl2ZSA8IGNvbmN1cnJlbnQgPyBkb0lubmVyU3ViKHZhbHVlKSA6IGJ1ZmZlci5wdXNoKHZhbHVlKSk7IH07XHJcbiAgICB2YXIgZG9Jbm5lclN1YiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIGV4cGFuZCAmJiBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xyXG4gICAgICAgIGFjdGl2ZSsrO1xyXG4gICAgICAgIHZhciBpbm5lckNvbXBsZXRlID0gZmFsc2U7XHJcbiAgICAgICAgaW5uZXJGcm9tKHByb2plY3QodmFsdWUsIGluZGV4KyspKS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uIChpbm5lclZhbHVlKSB7XHJcbiAgICAgICAgICAgIG9uQmVmb3JlTmV4dCA9PT0gbnVsbCB8fCBvbkJlZm9yZU5leHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uQmVmb3JlTmV4dChpbm5lclZhbHVlKTtcclxuICAgICAgICAgICAgaWYgKGV4cGFuZCkge1xyXG4gICAgICAgICAgICAgICAgb3V0ZXJOZXh0KGlubmVyVmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGlubmVyVmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpbm5lckNvbXBsZXRlID0gdHJ1ZTtcclxuICAgICAgICB9LCB1bmRlZmluZWQsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKGlubmVyQ29tcGxldGUpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlLS07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXJlZFZhbHVlID0gYnVmZmVyLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbm5lclN1YlNjaGVkdWxlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIGlubmVyU3ViU2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7IHJldHVybiBkb0lubmVyU3ViKGJ1ZmZlcmVkVmFsdWUpOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvSW5uZXJTdWIoYnVmZmVyZWRWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChidWZmZXIubGVuZ3RoICYmIGFjdGl2ZSA8IGNvbmN1cnJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2xvb3BfMSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjaGVja0NvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkpO1xyXG4gICAgfTtcclxuICAgIHNvdXJjZS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIG91dGVyTmV4dCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlzQ29tcGxldGUgPSB0cnVlO1xyXG4gICAgICAgIGNoZWNrQ29tcGxldGUoKTtcclxuICAgIH0pKTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgYWRkaXRpb25hbEZpbmFsaXplciA9PT0gbnVsbCB8fCBhZGRpdGlvbmFsRmluYWxpemVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhZGRpdGlvbmFsRmluYWxpemVyKCk7XHJcbiAgICB9O1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlSW50ZXJuYWxzLmpzLm1hcCIsImltcG9ydCB7IF9fcmVhZCwgX19zcHJlYWRBcnJheSB9IGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBtYXAgfSBmcm9tIFwiLi4vb3BlcmF0b3JzL21hcFwiO1xyXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XHJcbmZ1bmN0aW9uIGNhbGxPckFwcGx5KGZuLCBhcmdzKSB7XHJcbiAgICByZXR1cm4gaXNBcnJheShhcmdzKSA/IGZuLmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbXSwgX19yZWFkKGFyZ3MpKSkgOiBmbihhcmdzKTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gbWFwT25lT3JNYW55QXJncyhmbikge1xyXG4gICAgcmV0dXJuIG1hcChmdW5jdGlvbiAoYXJncykgeyByZXR1cm4gY2FsbE9yQXBwbHkoZm4sIGFyZ3MpOyB9KTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXBPbmVPck1hbnlBcmdzLmpzLm1hcCIsImltcG9ydCB7IF9fcmVhZCB9IGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcclxuaW1wb3J0IHsgbWVyZ2VNYXAgfSBmcm9tICcuLi9vcGVyYXRvcnMvbWVyZ2VNYXAnO1xyXG5pbXBvcnQgeyBpc0FycmF5TGlrZSB9IGZyb20gJy4uL3V0aWwvaXNBcnJheUxpa2UnO1xyXG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC9pc0Z1bmN0aW9uJztcclxuaW1wb3J0IHsgbWFwT25lT3JNYW55QXJncyB9IGZyb20gJy4uL3V0aWwvbWFwT25lT3JNYW55QXJncyc7XHJcbnZhciBub2RlRXZlbnRFbWl0dGVyTWV0aG9kcyA9IFsnYWRkTGlzdGVuZXInLCAncmVtb3ZlTGlzdGVuZXInXTtcclxudmFyIGV2ZW50VGFyZ2V0TWV0aG9kcyA9IFsnYWRkRXZlbnRMaXN0ZW5lcicsICdyZW1vdmVFdmVudExpc3RlbmVyJ107XHJcbnZhciBqcXVlcnlNZXRob2RzID0gWydvbicsICdvZmYnXTtcclxuZXhwb3J0IGZ1bmN0aW9uIGZyb21FdmVudCh0YXJnZXQsIGV2ZW50TmFtZSwgb3B0aW9ucywgcmVzdWx0U2VsZWN0b3IpIHtcclxuICAgIGlmIChpc0Z1bmN0aW9uKG9wdGlvbnMpKSB7XHJcbiAgICAgICAgcmVzdWx0U2VsZWN0b3IgPSBvcHRpb25zO1xyXG4gICAgICAgIG9wdGlvbnMgPSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgICBpZiAocmVzdWx0U2VsZWN0b3IpIHtcclxuICAgICAgICByZXR1cm4gZnJvbUV2ZW50KHRhcmdldCwgZXZlbnROYW1lLCBvcHRpb25zKS5waXBlKG1hcE9uZU9yTWFueUFyZ3MocmVzdWx0U2VsZWN0b3IpKTtcclxuICAgIH1cclxuICAgIHZhciBfYSA9IF9fcmVhZChpc0V2ZW50VGFyZ2V0KHRhcmdldClcclxuICAgICAgICA/IGV2ZW50VGFyZ2V0TWV0aG9kcy5tYXAoZnVuY3Rpb24gKG1ldGhvZE5hbWUpIHsgcmV0dXJuIGZ1bmN0aW9uIChoYW5kbGVyKSB7IHJldHVybiB0YXJnZXRbbWV0aG9kTmFtZV0oZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zKTsgfTsgfSlcclxuICAgICAgICA6XHJcbiAgICAgICAgICAgIGlzTm9kZVN0eWxlRXZlbnRFbWl0dGVyKHRhcmdldClcclxuICAgICAgICAgICAgICAgID8gbm9kZUV2ZW50RW1pdHRlck1ldGhvZHMubWFwKHRvQ29tbW9uSGFuZGxlclJlZ2lzdHJ5KHRhcmdldCwgZXZlbnROYW1lKSlcclxuICAgICAgICAgICAgICAgIDogaXNKUXVlcnlTdHlsZUV2ZW50RW1pdHRlcih0YXJnZXQpXHJcbiAgICAgICAgICAgICAgICAgICAgPyBqcXVlcnlNZXRob2RzLm1hcCh0b0NvbW1vbkhhbmRsZXJSZWdpc3RyeSh0YXJnZXQsIGV2ZW50TmFtZSkpXHJcbiAgICAgICAgICAgICAgICAgICAgOiBbXSwgMiksIGFkZCA9IF9hWzBdLCByZW1vdmUgPSBfYVsxXTtcclxuICAgIGlmICghYWRkKSB7XHJcbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlKHRhcmdldCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG1lcmdlTWFwKGZ1bmN0aW9uIChzdWJUYXJnZXQpIHsgcmV0dXJuIGZyb21FdmVudChzdWJUYXJnZXQsIGV2ZW50TmFtZSwgb3B0aW9ucyk7IH0pKGlubmVyRnJvbSh0YXJnZXQpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoIWFkZCkge1xyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgZXZlbnQgdGFyZ2V0Jyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcclxuICAgICAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gc3Vic2NyaWJlci5uZXh0KDEgPCBhcmdzLmxlbmd0aCA/IGFyZ3MgOiBhcmdzWzBdKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGFkZChoYW5kbGVyKTtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVtb3ZlKGhhbmRsZXIpOyB9O1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gdG9Db21tb25IYW5kbGVyUmVnaXN0cnkodGFyZ2V0LCBldmVudE5hbWUpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAobWV0aG9kTmFtZSkgeyByZXR1cm4gZnVuY3Rpb24gKGhhbmRsZXIpIHsgcmV0dXJuIHRhcmdldFttZXRob2ROYW1lXShldmVudE5hbWUsIGhhbmRsZXIpOyB9OyB9O1xyXG59XHJcbmZ1bmN0aW9uIGlzTm9kZVN0eWxlRXZlbnRFbWl0dGVyKHRhcmdldCkge1xyXG4gICAgcmV0dXJuIGlzRnVuY3Rpb24odGFyZ2V0LmFkZExpc3RlbmVyKSAmJiBpc0Z1bmN0aW9uKHRhcmdldC5yZW1vdmVMaXN0ZW5lcik7XHJcbn1cclxuZnVuY3Rpb24gaXNKUXVlcnlTdHlsZUV2ZW50RW1pdHRlcih0YXJnZXQpIHtcclxuICAgIHJldHVybiBpc0Z1bmN0aW9uKHRhcmdldC5vbikgJiYgaXNGdW5jdGlvbih0YXJnZXQub2ZmKTtcclxufVxyXG5mdW5jdGlvbiBpc0V2ZW50VGFyZ2V0KHRhcmdldCkge1xyXG4gICAgcmV0dXJuIGlzRnVuY3Rpb24odGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIpICYmIGlzRnVuY3Rpb24odGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIpO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyb21FdmVudC5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi4vU3Vic2NyaXB0aW9uJztcclxudmFyIEFjdGlvbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoQWN0aW9uLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gQWN0aW9uKHNjaGVkdWxlciwgd29yaykge1xyXG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xyXG4gICAgfVxyXG4gICAgQWN0aW9uLnByb3RvdHlwZS5zY2hlZHVsZSA9IGZ1bmN0aW9uIChzdGF0ZSwgZGVsYXkpIHtcclxuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICByZXR1cm4gQWN0aW9uO1xyXG59KFN1YnNjcmlwdGlvbikpO1xyXG5leHBvcnQgeyBBY3Rpb24gfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QWN0aW9uLmpzLm1hcCIsImltcG9ydCB7IF9fcmVhZCwgX19zcHJlYWRBcnJheSB9IGZyb20gXCJ0c2xpYlwiO1xyXG5leHBvcnQgdmFyIGludGVydmFsUHJvdmlkZXIgPSB7XHJcbiAgICBzZXRJbnRlcnZhbDogZnVuY3Rpb24gKGhhbmRsZXIsIHRpbWVvdXQpIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbX2kgLSAyXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGludGVydmFsUHJvdmlkZXIuZGVsZWdhdGU7XHJcbiAgICAgICAgaWYgKGRlbGVnYXRlID09PSBudWxsIHx8IGRlbGVnYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWxlZ2F0ZS5zZXRJbnRlcnZhbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGUuc2V0SW50ZXJ2YWwuYXBwbHkoZGVsZWdhdGUsIF9fc3ByZWFkQXJyYXkoW2hhbmRsZXIsIHRpbWVvdXRdLCBfX3JlYWQoYXJncykpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNldEludGVydmFsLmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbaGFuZGxlciwgdGltZW91dF0sIF9fcmVhZChhcmdzKSkpO1xyXG4gICAgfSxcclxuICAgIGNsZWFySW50ZXJ2YWw6IGZ1bmN0aW9uIChoYW5kbGUpIHtcclxuICAgICAgICB2YXIgZGVsZWdhdGUgPSBpbnRlcnZhbFByb3ZpZGVyLmRlbGVnYXRlO1xyXG4gICAgICAgIHJldHVybiAoKGRlbGVnYXRlID09PSBudWxsIHx8IGRlbGVnYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWxlZ2F0ZS5jbGVhckludGVydmFsKSB8fCBjbGVhckludGVydmFsKShoYW5kbGUpO1xyXG4gICAgfSxcclxuICAgIGRlbGVnYXRlOiB1bmRlZmluZWQsXHJcbn07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVydmFsUHJvdmlkZXIuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCB7IEFjdGlvbiB9IGZyb20gJy4vQWN0aW9uJztcclxuaW1wb3J0IHsgaW50ZXJ2YWxQcm92aWRlciB9IGZyb20gJy4vaW50ZXJ2YWxQcm92aWRlcic7XHJcbmltcG9ydCB7IGFyclJlbW92ZSB9IGZyb20gJy4uL3V0aWwvYXJyUmVtb3ZlJztcclxudmFyIEFzeW5jQWN0aW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhBc3luY0FjdGlvbiwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIEFzeW5jQWN0aW9uKHNjaGVkdWxlciwgd29yaykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHNjaGVkdWxlciwgd29yaykgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XHJcbiAgICAgICAgX3RoaXMud29yayA9IHdvcms7XHJcbiAgICAgICAgX3RoaXMucGVuZGluZyA9IGZhbHNlO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5zY2hlZHVsZSA9IGZ1bmN0aW9uIChzdGF0ZSwgZGVsYXkpIHtcclxuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cclxuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcclxuICAgICAgICB2YXIgaWQgPSB0aGlzLmlkO1xyXG4gICAgICAgIHZhciBzY2hlZHVsZXIgPSB0aGlzLnNjaGVkdWxlcjtcclxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmlkID0gdGhpcy5yZWN5Y2xlQXN5bmNJZChzY2hlZHVsZXIsIGlkLCBkZWxheSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucGVuZGluZyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5kZWxheSA9IGRlbGF5O1xyXG4gICAgICAgIHRoaXMuaWQgPSB0aGlzLmlkIHx8IHRoaXMucmVxdWVzdEFzeW5jSWQoc2NoZWR1bGVyLCB0aGlzLmlkLCBkZWxheSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLnJlcXVlc3RBc3luY0lkID0gZnVuY3Rpb24gKHNjaGVkdWxlciwgX2lkLCBkZWxheSkge1xyXG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxyXG4gICAgICAgIHJldHVybiBpbnRlcnZhbFByb3ZpZGVyLnNldEludGVydmFsKHNjaGVkdWxlci5mbHVzaC5iaW5kKHNjaGVkdWxlciwgdGhpcyksIGRlbGF5KTtcclxuICAgIH07XHJcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUucmVjeWNsZUFzeW5jSWQgPSBmdW5jdGlvbiAoX3NjaGVkdWxlciwgaWQsIGRlbGF5KSB7XHJcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XHJcbiAgICAgICAgaWYgKGRlbGF5ICE9IG51bGwgJiYgdGhpcy5kZWxheSA9PT0gZGVsYXkgJiYgdGhpcy5wZW5kaW5nID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gaWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGludGVydmFsUHJvdmlkZXIuY2xlYXJJbnRlcnZhbChpZCk7XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH07XHJcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUuZXhlY3V0ZSA9IGZ1bmN0aW9uIChzdGF0ZSwgZGVsYXkpIHtcclxuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignZXhlY3V0aW5nIGEgY2FuY2VsbGVkIGFjdGlvbicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnBlbmRpbmcgPSBmYWxzZTtcclxuICAgICAgICB2YXIgZXJyb3IgPSB0aGlzLl9leGVjdXRlKHN0YXRlLCBkZWxheSk7XHJcbiAgICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5wZW5kaW5nID09PSBmYWxzZSAmJiB0aGlzLmlkICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5pZCA9IHRoaXMucmVjeWNsZUFzeW5jSWQodGhpcy5zY2hlZHVsZXIsIHRoaXMuaWQsIG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUuX2V4ZWN1dGUgPSBmdW5jdGlvbiAoc3RhdGUsIF9kZWxheSkge1xyXG4gICAgICAgIHZhciBlcnJvcmVkID0gZmFsc2U7XHJcbiAgICAgICAgdmFyIGVycm9yVmFsdWU7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdGhpcy53b3JrKHN0YXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgZXJyb3JlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGVycm9yVmFsdWUgPSBlID8gZSA6IG5ldyBFcnJvcignU2NoZWR1bGVkIGFjdGlvbiB0aHJldyBmYWxzeSBlcnJvcicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZXJyb3JlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvclZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmNsb3NlZCkge1xyXG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLCBpZCA9IF9hLmlkLCBzY2hlZHVsZXIgPSBfYS5zY2hlZHVsZXI7XHJcbiAgICAgICAgICAgIHZhciBhY3Rpb25zID0gc2NoZWR1bGVyLmFjdGlvbnM7XHJcbiAgICAgICAgICAgIHRoaXMud29yayA9IHRoaXMuc3RhdGUgPSB0aGlzLnNjaGVkdWxlciA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMucGVuZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBhcnJSZW1vdmUoYWN0aW9ucywgdGhpcyk7XHJcbiAgICAgICAgICAgIGlmIChpZCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlkID0gdGhpcy5yZWN5Y2xlQXN5bmNJZChzY2hlZHVsZXIsIGlkLCBudWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmRlbGF5ID0gbnVsbDtcclxuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gQXN5bmNBY3Rpb247XHJcbn0oQWN0aW9uKSk7XHJcbmV4cG9ydCB7IEFzeW5jQWN0aW9uIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFzeW5jQWN0aW9uLmpzLm1hcCIsImV4cG9ydCB2YXIgZGF0ZVRpbWVzdGFtcFByb3ZpZGVyID0ge1xyXG4gICAgbm93OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIChkYXRlVGltZXN0YW1wUHJvdmlkZXIuZGVsZWdhdGUgfHwgRGF0ZSkubm93KCk7XHJcbiAgICB9LFxyXG4gICAgZGVsZWdhdGU6IHVuZGVmaW5lZCxcclxufTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0ZVRpbWVzdGFtcFByb3ZpZGVyLmpzLm1hcCIsImltcG9ydCB7IGRhdGVUaW1lc3RhbXBQcm92aWRlciB9IGZyb20gJy4vc2NoZWR1bGVyL2RhdGVUaW1lc3RhbXBQcm92aWRlcic7XHJcbnZhciBTY2hlZHVsZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gU2NoZWR1bGVyKHNjaGVkdWxlckFjdGlvbkN0b3IsIG5vdykge1xyXG4gICAgICAgIGlmIChub3cgPT09IHZvaWQgMCkgeyBub3cgPSBTY2hlZHVsZXIubm93OyB9XHJcbiAgICAgICAgdGhpcy5zY2hlZHVsZXJBY3Rpb25DdG9yID0gc2NoZWR1bGVyQWN0aW9uQ3RvcjtcclxuICAgICAgICB0aGlzLm5vdyA9IG5vdztcclxuICAgIH1cclxuICAgIFNjaGVkdWxlci5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAod29yaywgZGVsYXksIHN0YXRlKSB7XHJcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzLnNjaGVkdWxlckFjdGlvbkN0b3IodGhpcywgd29yaykuc2NoZWR1bGUoc3RhdGUsIGRlbGF5KTtcclxuICAgIH07XHJcbiAgICBTY2hlZHVsZXIubm93ID0gZGF0ZVRpbWVzdGFtcFByb3ZpZGVyLm5vdztcclxuICAgIHJldHVybiBTY2hlZHVsZXI7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IFNjaGVkdWxlciB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1TY2hlZHVsZXIuanMubWFwIiwiaW1wb3J0IHsgQXN5bmNBY3Rpb24gfSBmcm9tICcuL0FzeW5jQWN0aW9uJztcclxuaW1wb3J0IHsgQXN5bmNTY2hlZHVsZXIgfSBmcm9tICcuL0FzeW5jU2NoZWR1bGVyJztcclxuZXhwb3J0IHZhciBhc3luY1NjaGVkdWxlciA9IG5ldyBBc3luY1NjaGVkdWxlcihBc3luY0FjdGlvbik7XHJcbmV4cG9ydCB2YXIgYXN5bmMgPSBhc3luY1NjaGVkdWxlcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXN5bmMuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCB7IFNjaGVkdWxlciB9IGZyb20gJy4uL1NjaGVkdWxlcic7XHJcbnZhciBBc3luY1NjaGVkdWxlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoQXN5bmNTY2hlZHVsZXIsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBBc3luY1NjaGVkdWxlcihTY2hlZHVsZXJBY3Rpb24sIG5vdykge1xyXG4gICAgICAgIGlmIChub3cgPT09IHZvaWQgMCkgeyBub3cgPSBTY2hlZHVsZXIubm93OyB9XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgU2NoZWR1bGVyQWN0aW9uLCBub3cpIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMuYWN0aW9ucyA9IFtdO1xyXG4gICAgICAgIF90aGlzLl9hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICBfdGhpcy5fc2NoZWR1bGVkID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIEFzeW5jU2NoZWR1bGVyLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICB2YXIgYWN0aW9ucyA9IHRoaXMuYWN0aW9ucztcclxuICAgICAgICBpZiAodGhpcy5fYWN0aXZlKSB7XHJcbiAgICAgICAgICAgIGFjdGlvbnMucHVzaChhY3Rpb24pO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBlcnJvcjtcclxuICAgICAgICB0aGlzLl9hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIGRvIHtcclxuICAgICAgICAgICAgaWYgKChlcnJvciA9IGFjdGlvbi5leGVjdXRlKGFjdGlvbi5zdGF0ZSwgYWN0aW9uLmRlbGF5KSkpIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSB3aGlsZSAoKGFjdGlvbiA9IGFjdGlvbnMuc2hpZnQoKSkpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgICB3aGlsZSAoKGFjdGlvbiA9IGFjdGlvbnMuc2hpZnQoKSkpIHtcclxuICAgICAgICAgICAgICAgIGFjdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gQXN5bmNTY2hlZHVsZXI7XHJcbn0oU2NoZWR1bGVyKSk7XHJcbmV4cG9ydCB7IEFzeW5jU2NoZWR1bGVyIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFzeW5jU2NoZWR1bGVyLmpzLm1hcCIsImltcG9ydCB7IGV4ZWN1dGVTY2hlZHVsZSB9IGZyb20gJy4uL3V0aWwvZXhlY3V0ZVNjaGVkdWxlJztcclxuaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XHJcbmltcG9ydCB7IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4vT3BlcmF0b3JTdWJzY3JpYmVyJztcclxuZXhwb3J0IGZ1bmN0aW9uIG9ic2VydmVPbihzY2hlZHVsZXIsIGRlbGF5KSB7XHJcbiAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cclxuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcclxuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIGV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7IH0sIGRlbGF5KTsgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5jb21wbGV0ZSgpOyB9LCBkZWxheSk7IH0sIGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIGV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIuZXJyb3IoZXJyKTsgfSwgZGVsYXkpOyB9KSk7XHJcbiAgICB9KTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYnNlcnZlT24uanMubWFwIiwiaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XHJcbmV4cG9ydCBmdW5jdGlvbiBzdWJzY3JpYmVPbihzY2hlZHVsZXIsIGRlbGF5KSB7XHJcbiAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cclxuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcclxuICAgICAgICBzdWJzY3JpYmVyLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gc291cmNlLnN1YnNjcmliZShzdWJzY3JpYmVyKTsgfSwgZGVsYXkpKTtcclxuICAgIH0pO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1YnNjcmliZU9uLmpzLm1hcCIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcclxuaW1wb3J0IHsgZXhlY3V0ZVNjaGVkdWxlIH0gZnJvbSAnLi4vdXRpbC9leGVjdXRlU2NoZWR1bGUnO1xyXG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVBc3luY0l0ZXJhYmxlKGlucHV0LCBzY2hlZHVsZXIpIHtcclxuICAgIGlmICghaW5wdXQpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0l0ZXJhYmxlIGNhbm5vdCBiZSBudWxsJyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcclxuICAgICAgICBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBpdGVyYXRvciA9IGlucHV0W1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpO1xyXG4gICAgICAgICAgICBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpdGVyYXRvci5uZXh0KCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5kb25lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChyZXN1bHQudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LCAwLCB0cnVlKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlQXN5bmNJdGVyYWJsZS5qcy5tYXAiLCJpbXBvcnQgeyBzY2hlZHVsZWQgfSBmcm9tICcuLi9zY2hlZHVsZWQvc2NoZWR1bGVkJztcclxuaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi9pbm5lckZyb20nO1xyXG5leHBvcnQgZnVuY3Rpb24gZnJvbShpbnB1dCwgc2NoZWR1bGVyKSB7XHJcbiAgICByZXR1cm4gc2NoZWR1bGVyID8gc2NoZWR1bGVkKGlucHV0LCBzY2hlZHVsZXIpIDogaW5uZXJGcm9tKGlucHV0KTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tLmpzLm1hcCIsImltcG9ydCB7IHNjaGVkdWxlT2JzZXJ2YWJsZSB9IGZyb20gJy4vc2NoZWR1bGVPYnNlcnZhYmxlJztcclxuaW1wb3J0IHsgc2NoZWR1bGVQcm9taXNlIH0gZnJvbSAnLi9zY2hlZHVsZVByb21pc2UnO1xyXG5pbXBvcnQgeyBzY2hlZHVsZUFycmF5IH0gZnJvbSAnLi9zY2hlZHVsZUFycmF5JztcclxuaW1wb3J0IHsgc2NoZWR1bGVJdGVyYWJsZSB9IGZyb20gJy4vc2NoZWR1bGVJdGVyYWJsZSc7XHJcbmltcG9ydCB7IHNjaGVkdWxlQXN5bmNJdGVyYWJsZSB9IGZyb20gJy4vc2NoZWR1bGVBc3luY0l0ZXJhYmxlJztcclxuaW1wb3J0IHsgaXNJbnRlcm9wT2JzZXJ2YWJsZSB9IGZyb20gJy4uL3V0aWwvaXNJbnRlcm9wT2JzZXJ2YWJsZSc7XHJcbmltcG9ydCB7IGlzUHJvbWlzZSB9IGZyb20gJy4uL3V0aWwvaXNQcm9taXNlJztcclxuaW1wb3J0IHsgaXNBcnJheUxpa2UgfSBmcm9tICcuLi91dGlsL2lzQXJyYXlMaWtlJztcclxuaW1wb3J0IHsgaXNJdGVyYWJsZSB9IGZyb20gJy4uL3V0aWwvaXNJdGVyYWJsZSc7XHJcbmltcG9ydCB7IGlzQXN5bmNJdGVyYWJsZSB9IGZyb20gJy4uL3V0aWwvaXNBc3luY0l0ZXJhYmxlJztcclxuaW1wb3J0IHsgY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IgfSBmcm9tICcuLi91dGlsL3Rocm93VW5vYnNlcnZhYmxlRXJyb3InO1xyXG5pbXBvcnQgeyBpc1JlYWRhYmxlU3RyZWFtTGlrZSB9IGZyb20gJy4uL3V0aWwvaXNSZWFkYWJsZVN0cmVhbUxpa2UnO1xyXG5pbXBvcnQgeyBzY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZSB9IGZyb20gJy4vc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UnO1xyXG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVkKGlucHV0LCBzY2hlZHVsZXIpIHtcclxuICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XHJcbiAgICAgICAgaWYgKGlzSW50ZXJvcE9ic2VydmFibGUoaW5wdXQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZU9ic2VydmFibGUoaW5wdXQsIHNjaGVkdWxlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpc0FycmF5TGlrZShpbnB1dCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlQXJyYXkoaW5wdXQsIHNjaGVkdWxlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpc1Byb21pc2UoaW5wdXQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZVByb21pc2UoaW5wdXQsIHNjaGVkdWxlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpc0FzeW5jSXRlcmFibGUoaW5wdXQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZUFzeW5jSXRlcmFibGUoaW5wdXQsIHNjaGVkdWxlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpc0l0ZXJhYmxlKGlucHV0KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVJdGVyYWJsZShpbnB1dCwgc2NoZWR1bGVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlzUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UoaW5wdXQsIHNjaGVkdWxlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhyb3cgY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IoaW5wdXQpO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlZC5qcy5tYXAiLCJpbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XHJcbmltcG9ydCB7IG9ic2VydmVPbiB9IGZyb20gJy4uL29wZXJhdG9ycy9vYnNlcnZlT24nO1xyXG5pbXBvcnQgeyBzdWJzY3JpYmVPbiB9IGZyb20gJy4uL29wZXJhdG9ycy9zdWJzY3JpYmVPbic7XHJcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZU9ic2VydmFibGUoaW5wdXQsIHNjaGVkdWxlcikge1xyXG4gICAgcmV0dXJuIGlubmVyRnJvbShpbnB1dCkucGlwZShzdWJzY3JpYmVPbihzY2hlZHVsZXIpLCBvYnNlcnZlT24oc2NoZWR1bGVyKSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVPYnNlcnZhYmxlLmpzLm1hcCIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcclxuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlQXJyYXkoaW5wdXQsIHNjaGVkdWxlcikge1xyXG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XHJcbiAgICAgICAgdmFyIGkgPSAwO1xyXG4gICAgICAgIHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoaSA9PT0gaW5wdXQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoaW5wdXRbaSsrXSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXN1YnNjcmliZXIuY2xvc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZUFycmF5LmpzLm1hcCIsImltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvaW5uZXJGcm9tJztcclxuaW1wb3J0IHsgb2JzZXJ2ZU9uIH0gZnJvbSAnLi4vb3BlcmF0b3JzL29ic2VydmVPbic7XHJcbmltcG9ydCB7IHN1YnNjcmliZU9uIH0gZnJvbSAnLi4vb3BlcmF0b3JzL3N1YnNjcmliZU9uJztcclxuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlUHJvbWlzZShpbnB1dCwgc2NoZWR1bGVyKSB7XHJcbiAgICByZXR1cm4gaW5uZXJGcm9tKGlucHV0KS5waXBlKHN1YnNjcmliZU9uKHNjaGVkdWxlciksIG9ic2VydmVPbihzY2hlZHVsZXIpKTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZVByb21pc2UuanMubWFwIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xyXG5pbXBvcnQgeyBpdGVyYXRvciBhcyBTeW1ib2xfaXRlcmF0b3IgfSBmcm9tICcuLi9zeW1ib2wvaXRlcmF0b3InO1xyXG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC9pc0Z1bmN0aW9uJztcclxuaW1wb3J0IHsgZXhlY3V0ZVNjaGVkdWxlIH0gZnJvbSAnLi4vdXRpbC9leGVjdXRlU2NoZWR1bGUnO1xyXG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVJdGVyYWJsZShpbnB1dCwgc2NoZWR1bGVyKSB7XHJcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcclxuICAgICAgICB2YXIgaXRlcmF0b3I7XHJcbiAgICAgICAgZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpdGVyYXRvciA9IGlucHV0W1N5bWJvbF9pdGVyYXRvcl0oKTtcclxuICAgICAgICAgICAgZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRvbmU7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIChfYSA9IGl0ZXJhdG9yLm5leHQoKSwgdmFsdWUgPSBfYS52YWx1ZSwgZG9uZSA9IF9hLmRvbmUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZG9uZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIDAsIHRydWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBpc0Z1bmN0aW9uKGl0ZXJhdG9yID09PSBudWxsIHx8IGl0ZXJhdG9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpdGVyYXRvci5yZXR1cm4pICYmIGl0ZXJhdG9yLnJldHVybigpOyB9O1xyXG4gICAgfSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVJdGVyYWJsZS5qcy5tYXAiLCJpbXBvcnQgeyBzY2hlZHVsZUFzeW5jSXRlcmFibGUgfSBmcm9tICcuL3NjaGVkdWxlQXN5bmNJdGVyYWJsZSc7XHJcbmltcG9ydCB7IHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IgfSBmcm9tICcuLi91dGlsL2lzUmVhZGFibGVTdHJlYW1MaWtlJztcclxuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0LCBzY2hlZHVsZXIpIHtcclxuICAgIHJldHVybiBzY2hlZHVsZUFzeW5jSXRlcmFibGUocmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvcihpbnB1dCksIHNjaGVkdWxlcik7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UuanMubWFwIiwiZXhwb3J0IGNsYXNzIFBhcmtpbmdTcG90e1xyXG4gICAgaWQ6IG51bWJlciA9IHVuZGVmaW5lZFxyXG4gICAgcGFya2luZ0hhc2g6IHN0cmluZyA9IHVuZGVmaW5lZDtcclxuICAgIGNpdHk6IHN0cmluZyA9IHVuZGVmaW5lZDtcclxuICAgIHRpbWVPY2N1cGllZDogc3RyaW5nID0gdW5kZWZpbmVkOyAvL2RhdGVUaW1lP1xyXG4gICAgem9uZTogbnVtYmVyID0gdW5kZWZpbmVkOyAvL2FrbyBqZSAzIG9uZGEgc2UgbmUgcmFjdW5hIHBlbmFsdHkgaSBuaWplIG9ncmFuaWNlbm8sIDIgamUgbWFsbyB1YmxhemVubyAoYWxpIHNlIHJhY3VuYSksIDEgLSBuYWpnb3JlXHJcbiAgICAgICAgLy9wcmVwcmF2aXRpIHUgYmF6aSB6b251IDMgZGEgYnVkZSBudWxsIHphIHRhcmlmdSwgcGVuYWx0eSBpIG1heFRpbWVcclxuICAgIHRhcmlmZjogbnVtYmVyID0gdW5kZWZpbmVkOyAvL292byBzZSBtbm96aSBzYSBwcm92ZWRlbmltIHZyZW1lbm9tIChrYW8ga29lZmljaWplbnQpIGkgdGFrbyBkb2JpamEgY2VuYVxyXG4gICAgcGVuYWx0eUluZGV4OiBudW1iZXIgPSB1bmRlZmluZWQ7IC8vb3ZvIHNlIG1ub3ppIHNhIHRhcmlmb20gYWtvIHNlIHByZWtvcmFjaSBtYXhUaW1lIFxyXG4gICAgbWF4VGltZTogbnVtYmVyID0gdW5kZWZpbmVkO1xyXG4gICAgbG9jYXRpb25YOiBudW1iZXIgPSB1bmRlZmluZWQ7XHJcbiAgICBsb2NhdGlvblk6IG51bWJlciA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihfaWQ6IG51bWJlciwgX3BhcmtpbmdIYXNoIDogc3RyaW5nLCBfdGltZU9jY3VwaWVkIDogc3RyaW5nLCBfem9uZSA6IG51bWJlciwgX3RhcmlmZiA6IG51bWJlciwgX3BlbmFsdHlJbmRleCA6bnVtYmVyLCBfbWF4VGltZSA6IG51bWJlciwgX2NpdHk6IHN0cmluZywgX2xvY2F0aW9uWDogbnVtYmVyLCBfbG9jYXRpb25ZOiBudW1iZXIpe1xyXG4gICAgICAgIHRoaXMuaWQgPSBfaWQ7XHJcbiAgICAgICAgdGhpcy5wYXJraW5nSGFzaCA9IF9wYXJraW5nSGFzaDtcclxuICAgICAgICB0aGlzLnRpbWVPY2N1cGllZCA9IF90aW1lT2NjdXBpZWQ7XHJcbiAgICAgICAgdGhpcy56b25lID0gX3pvbmU7XHJcbiAgICAgICAgdGhpcy50YXJpZmYgPSBfdGFyaWZmO1xyXG4gICAgICAgIGlmKHRoaXMuem9uZT09PTMpe1xyXG4gICAgICAgICAgICB0aGlzLnBlbmFsdHlJbmRleD0xO1xyXG4gICAgICAgICAgICB0aGlzLm1heFRpbWUgPSAwO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICB0aGlzLnBlbmFsdHlJbmRleD1fcGVuYWx0eUluZGV4O1xyXG4gICAgICAgICAgICB0aGlzLm1heFRpbWUgPSBfbWF4VGltZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jaXR5ID0gX2NpdHk7XHJcbiAgICAgICAgdGhpcy5sb2NhdGlvblggPSBfbG9jYXRpb25YO1xyXG4gICAgICAgIHRoaXMubG9jYXRpb25ZID0gX2xvY2F0aW9uWTtcclxuICAgIH1cclxufSIsImltcG9ydCB7ZGVib3VuY2VUaW1lLCBmaWx0ZXIsIGZvcmtKb2luLCBmcm9tLCBmcm9tRXZlbnQsIGludGVydmFsLCBtYXAsIE9ic2VydmFibGUsIFN1YnNjcmlwdGlvbiwgc3dpdGNoTWFwfSBmcm9tIFwicnhqc1wiO1xyXG5pbXBvcnQgeyBQYXJraW5nU3BvdCB9IGZyb20gXCIuLi9tb2RlbHMvUGFya2luZ1Nwb3RcIjtcclxuaW1wb3J0IHtlbnZpcm9ubWVudHN9IGZyb20gXCIuLi9lbnZpcm9ubWVudHNcIjtcclxuaW1wb3J0IHsgY3JlYXRlQ2xpZW50IH0gZnJvbSBcIi4uL21vZGVscy9jbGllbnRTdGF0ZVwiO1xyXG5pbXBvcnQgeyBkcmF3Q2hlY2tlckNvbnRlbnQsIHNob3dDdXJyZW50U3RhdGUgfSBmcm9tIFwiLi4vZHJhd2luZ1wiO1xyXG5pbXBvcnQgeyBQbGFjZSB9IGZyb20gXCIuLi9tb2RlbHMvUGxhY2VcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjaGVja0NvZGUoaW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQpe1xyXG4gICAgZnJvbUV2ZW50KGlucHV0LCBcImlucHV0XCIpLnBpcGUoXHJcbiAgICAgICAgZGVib3VuY2VUaW1lKDUwMCksXHJcbiAgICAgICAgbWFwKChldjogSW5wdXRFdmVudCkgPT4gKDxIVE1MSW5wdXRFbGVtZW50PmV2LnRhcmdldCkudmFsdWUpLFxyXG4gICAgICAgIGZpbHRlcih0ZXh0ID0+IHRleHQubGVuZ3RoID09IGVudmlyb25tZW50cy5jb2RlTGVuZ3RoKSxcclxuICAgICAgICBzd2l0Y2hNYXAoKHRleHQ6c3RyaW5nKSA9PiBnZXRQYXJraW5nU3BvdCh0ZXh0KSksXHJcbiAgICApLnN1YnNjcmliZSgob3V0cHV0KT0+e1xyXG4gICAgICAgIGlmKG91dHB1dFswXS5vY2N1cGllZCA9PT0gdHJ1ZSl7XHJcbiAgICAgICAgICAgIGxldCBzdGF0ZSA9IGNyZWF0ZUNsaWVudCgpO1xyXG4gICAgICAgICAgICBzdGF0ZS5wYXJrZWQ9dHJ1ZTtcclxuICAgICAgICAgICAgc3RhdGUucGFya2luZ1Nwb3QgPSBuZXcgUGFya2luZ1Nwb3Qob3V0cHV0WzBdLmlkLCBvdXRwdXRbMF0ucGFya2luZ0hhc2gsIG91dHB1dFswXS50aW1lT2NjdXBpZWQsIG91dHB1dFswXS56b25lLCBvdXRwdXRbMF0udGFyaWZmLCBvdXRwdXRbMF0ucGVuYWx0eUluZGV4LCBvdXRwdXRbMF0ubWF4VGltZSwgb3V0cHV0WzBdLmNpdHksIG91dHB1dFswXS5sb2NhdGlvblgsIG91dHB1dFswXS5sb2NhdGlvblkpO1xyXG4gICAgICAgICAgICBkcmF3Q2hlY2tlckNvbnRlbnQoKTtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgYWxlcnQoXCJUaGlzIGlzIG5vdCB5b3VyIHBhcmtpbmcgc3BvdC5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFBhcmtpbmdTcG90KGNvZGU6c3RyaW5nKTpPYnNlcnZhYmxlPGFueT57XHJcbiAgICBsZXQgdXJsIDogc3RyaW5nID0gYCR7ZW52aXJvbm1lbnRzLlVSTH0vcGFya2luZ3MvP2NvZGU9JHtjb2RlfWA7XHJcbiAgICByZXR1cm4gZnJvbSggICAgXHJcbiAgICAgICAgZmV0Y2godXJsKVxyXG4gICAgICAgIC50aGVuKChyZXMpID0+IHtcclxuICAgICAgICAgICAgaWYgKHJlcy5vayl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcclxuICAgICAgICAgICAgfSBcclxuICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBhcmtpbmcgbm90IGZvdW5kXCIpO1xyXG4gICAgICAgICAgICB9IFxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKChlcnIpID0+IChjb25zb2xlLmxvZyhlbnZpcm9ubWVudHMuY29kZUVycm9yKSkpXHJcbiAgICApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlKCk6IFN1YnNjcmlwdGlvbntcclxuICAgIGxldCBzdGF0ZSA9IGNyZWF0ZUNsaWVudCgpO1xyXG4gICAgbGV0IGR1clMgOiBudW1iZXIgPSBjYWxjdWxhdGVEdXJhdGlvbkluU2Vjb25kcygpOyAgICBcclxuICAgIGNvbnN0IHN1YiA9IGludGVydmFsKDEwMDApLnBpcGUoXHJcbiAgICAgICAgbWFwKCAoeCkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gY2FsY3VsYXRlVGltZUFuZFByaWNlKGR1clMseCk7XHJcbiAgICAgICAgfSlcclxuICAgICkuc3Vic2NyaWJlKChyZXM6IFtzdHJpbmcsIHN0cmluZywgbnVtYmVyLGJvb2xlYW5dKT0+e3Nob3dDdXJyZW50U3RhdGUocmVzKX0pO1xyXG4gICAgcmV0dXJuIHN1YjtcclxufVxyXG5cclxuZnVuY3Rpb24gY2FsY3VsYXRlRHVyYXRpb25JblNlY29uZHMoKTogbnVtYmVye1xyXG4gICAgbGV0IHN0YXRlID0gY3JlYXRlQ2xpZW50KCk7XHJcbiAgICBsZXQgdG1wRGF0ZSA6IERhdGUgPSBuZXcgRGF0ZSgpOyBcclxuICAgIGxldCB0bXBIOiBudW1iZXIgPSB0bXBEYXRlLmdldEhvdXJzKCkqMzYwO1xyXG4gICAgbGV0IHRtcE06IG51bWJlciA9IHRtcERhdGUuZ2V0TWludXRlcygpKjYwO1xyXG4gICAgbGV0IHRtcFM6IG51bWJlciA9IHRtcERhdGUuZ2V0U2Vjb25kcygpICsgdG1wSCArIHRtcE07XHJcbiAgICBsZXQgdGltZU9jY3VwaWVkU3BsaXRlZCA6IHN0cmluZ1tdID0gc3RhdGUucGFya2luZ1Nwb3QudGltZU9jY3VwaWVkLnNwbGl0KFwiOlwiLDMpO1xyXG4gICAgcmV0dXJuIHRtcFMgLSAocGFyc2VJbnQodGltZU9jY3VwaWVkU3BsaXRlZFswXSkqMzYwICsgcGFyc2VJbnQodGltZU9jY3VwaWVkU3BsaXRlZFsxXSkqNjAgKyBwYXJzZUludCh0aW1lT2NjdXBpZWRTcGxpdGVkWzJdKSkgLSAxO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjYWxjdWxhdGVUaW1lQW5kUHJpY2UoZHVyUzogbnVtYmVyLCB4OiBudW1iZXIpOiBbc3RyaW5nLCBzdHJpbmcsIG51bWJlciwgYm9vbGVhbl17XHJcbiAgICBsZXQgc3RhdGUgPSBjcmVhdGVDbGllbnQoKTtcclxuICAgIGxldCByZXMgOiBbc3RyaW5nLCBzdHJpbmcsIG51bWJlciwgYm9vbGVhbl0gPSBbXCJcIixcIlwiLDAsZmFsc2VdO1xyXG4gICAgbGV0IHBlbmFsdHk6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIGR1clMrPXg7XHJcbiAgICByZXNbMF0gPSBgJHtNYXRoLmZsb29yKGR1clMvMzYwKX06JHtNYXRoLmZsb29yKChkdXJTJTM2MCkvNjApfTokeyhkdXJTJTM2MCklNjB9YDsgICAgICAgICAgICAgICAgXHJcbiAgICBsZXQgaW5kZXg6bnVtYmVyID0gc3RhdGUucGFya2luZ1Nwb3QudGFyaWZmO1xyXG4gICAgLy96YSBtYXhUaW1lIHUgc2F0aW1hXHJcbiAgICAvLyBpZihzdGF0ZS5wYXJraW5nU3BvdC56b25lPDMgJiYgc3RhdGUucGFya2luZ1Nwb3QubWF4VGltZSozNjAgPiBkdXJTKXtcclxuICAgIC8vICAgICBpbmRleCAqPSBzdGF0ZS5wYXJraW5nU3BvdC5wZW5hbHR5SW5kZXg7XHJcbiAgICAvLyAgICAgcGVuYWx0eSA9IHRydWU7XHJcbiAgICAvLyB9IFxyXG4gICAgaWYoc3RhdGUucGFya2luZ1Nwb3Quem9uZTwzICYmIHN0YXRlLnBhcmtpbmdTcG90Lm1heFRpbWUgPCBkdXJTKXtcclxuICAgICAgICBpbmRleCAqPSBzdGF0ZS5wYXJraW5nU3BvdC5wZW5hbHR5SW5kZXg7XHJcbiAgICAgICAgcGVuYWx0eSA9IHRydWU7XHJcbiAgICB9ZWxzZXtcclxuICAgICAgICBsZXQgcmVtYWluaW5nVGltZSA9IHN0YXRlLnBhcmtpbmdTcG90Lm1heFRpbWUgLSBkdXJTXHJcbiAgICAgICAgcmVzWzFdID0gYCR7TWF0aC5mbG9vcihyZW1haW5pbmdUaW1lLzM2MCl9OiR7TWF0aC5mbG9vcigocmVtYWluaW5nVGltZSUzNjApLzYwKX06JHsocmVtYWluaW5nVGltZSUzNjApJTYwfWA7XHJcbiAgICB9XHJcbiAgICByZXNbMl0gPSBNYXRoLnJvdW5kKGVudmlyb25tZW50cy5wcmljZVBlclNlY29uZCAqIGluZGV4ICogZHVyUyAqIDEwMCkgLyAxMDA7IFxyXG4gICAgcmVzWzNdID0gcGVuYWx0eTtcclxuICAgIHJldHVybiByZXM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBsb2dPdXQoc3ViOiBTdWJzY3JpcHRpb24pe1xyXG4gICAgc3ViLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAvL2phdmkgc2VydmVydSBkYSBqZSBzbG9ib2Rub1xyXG4gICAgZnJlZVBhcmtpbmcoKTtcclxuICAgIGxldCBzdGF0ZSA9IGNyZWF0ZUNsaWVudCgpO1xyXG4gICAgbGV0IGluZm86IHN0cmluZyA9IGVudmlyb25tZW50cy5wYXltZW50SW5mbytzdGF0ZS5wcmljZTtcclxuICAgIGFsZXJ0KGluZm8pO1xyXG4gICAgc3RhdGUucGFya2VkID0gZmFsc2U7XHJcbiAgICBkcmF3Q2hlY2tlckNvbnRlbnQoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZnJlZVBhcmtpbmcoKTpPYnNlcnZhYmxlPFJlc3BvbnNlPntcclxuICAgIGxldCBzdGF0ZSA9IGNyZWF0ZUNsaWVudCgpO1xyXG4gICAgbGV0IHVybCA6IHN0cmluZyA9IGAke2Vudmlyb25tZW50cy5VUkx9L3BhcmtpbmdzLyR7c3RhdGUucGFya2luZ1Nwb3QuaWR9YDtcclxuICAgIGNvbnN0IHB1dFJlcXVlc3Q6IE9ic2VydmFibGU8UmVzcG9uc2U+ID0gZnJvbSggICAgXHJcbiAgICAgICAgZmV0Y2godXJsLCB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJQVVRcIiwgXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICdDb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoXHJcbiAgICAgICAgICAgICAgICB7IFxyXG4gICAgICAgICAgICAgICAgICAgIGlkOnN0YXRlLnBhcmtpbmdTcG90LmlkLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvZGU6c3RhdGUucGFya2luZ1Nwb3QucGFya2luZ0hhc2gsXHJcbiAgICAgICAgICAgICAgICAgICAgY2l0eTpzdGF0ZS5wYXJraW5nU3BvdC5jaXR5LFxyXG4gICAgICAgICAgICAgICAgICAgIHpvbmU6c3RhdGUucGFya2luZ1Nwb3Quem9uZSxcclxuICAgICAgICAgICAgICAgICAgICB0YXJpZmY6IHN0YXRlLnBhcmtpbmdTcG90LnRhcmlmZixcclxuICAgICAgICAgICAgICAgICAgICBwZW5hbHR5SW5kZXg6IHN0YXRlLnBhcmtpbmdTcG90LnBlbmFsdHlJbmRleCxcclxuICAgICAgICAgICAgICAgICAgICBtYXhUaW1lOiBzdGF0ZS5wYXJraW5nU3BvdC5tYXhUaW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uWDogc3RhdGUucGFya2luZ1Nwb3QubG9jYXRpb25YLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uWTogc3RhdGUucGFya2luZ1Nwb3QubG9jYXRpb25ZLFxyXG4gICAgICAgICAgICAgICAgICAgIG9jY3VwaWVkOmZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpbWVPY2N1cGllZDogbnVsbFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgfSlcclxuICAgICk7XHJcbiAgICBzdGF0ZS5wYXJraW5nU3BvdD1udWxsO1xyXG4gICAgcmV0dXJuIHB1dFJlcXVlc3Q7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmZXRjaFBsYWNlcygpOiBQbGFjZVtde1xyXG4gICAgY29uc3QgdXJsOiBzdHJpbmcgPSBgJHtlbnZpcm9ubWVudHMuVVJMfS9wbGFjZXMvYDsgICAgXHJcbiAgICBsZXQgcGxhY2VzTGlzdDpQbGFjZVtdID0gW107XHJcbiAgICBjb25zdCB4OiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgbGV0IGxlbjogbnVtYmVyID0gMDtcclxuICAgIGxldCBwcm9taXNlID0gZmV0Y2godXJsKVxyXG4gICAgICAgIC50aGVuKCByZXNwb25zZSA9PiB7cmV0dXJuIHJlc3BvbnNlLmpzb24oKTt9KTtcclxuICAgIC8vIC50aGVuKCAobGlzdCkgPT4ge1xyXG4gICAgLy8gICAgICAgICBsZW4gPSBsaXN0Lmxlbmd0aDtcclxuICAgICAgICAgICAgXHJcbiAgICAvLyAgICAgICAgIC8vIGxpc3QucmVzdWx0cy5tYXAoIChvYmo6IFBsYWNlKSA9PiB4LnB1c2gob2JqLm5hbWUpICk7XHJcbiAgICAvLyAgICAgICAgIC8vIGNvbnNvbGUubG9nKHgpO1xyXG5cclxuICAgIC8vICAgICAgICAgLy9wbGFjZXNMaXN0ID0gbGlzdC5kYXRhLm1hcCggKG9iajogUGxhY2UpID0+IHBsYWNlc0xpc3QucHVzaChuZXcgUGxhY2Uob2JqKSkpO1xyXG4gICAgLy8gfSk7XHJcbiAgICBwcm9taXNlLnRoZW4oKGxpc3Q6UGxhY2VbXSk9PntcclxuICAgICAgICBwbGFjZXNMaXN0ID0gbGlzdDtcclxuICAgIH0pO1xyXG4gICAgY29uc29sZS5sb2cocGxhY2VzTGlzdCk7XHJcbiAgICByZXR1cm4gcGxhY2VzTGlzdDtcclxufSIsImltcG9ydCB7IGFzeW5jU2NoZWR1bGVyIH0gZnJvbSAnLi4vc2NoZWR1bGVyL2FzeW5jJztcclxuaW1wb3J0IHsgdGltZXIgfSBmcm9tICcuL3RpbWVyJztcclxuZXhwb3J0IGZ1bmN0aW9uIGludGVydmFsKHBlcmlvZCwgc2NoZWR1bGVyKSB7XHJcbiAgICBpZiAocGVyaW9kID09PSB2b2lkIDApIHsgcGVyaW9kID0gMDsgfVxyXG4gICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7IHNjaGVkdWxlciA9IGFzeW5jU2NoZWR1bGVyOyB9XHJcbiAgICBpZiAocGVyaW9kIDwgMCkge1xyXG4gICAgICAgIHBlcmlvZCA9IDA7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGltZXIocGVyaW9kLCBwZXJpb2QsIHNjaGVkdWxlcik7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJ2YWwuanMubWFwIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xyXG5pbXBvcnQgeyBhc3luYyBhcyBhc3luY1NjaGVkdWxlciB9IGZyb20gJy4uL3NjaGVkdWxlci9hc3luYyc7XHJcbmltcG9ydCB7IGlzU2NoZWR1bGVyIH0gZnJvbSAnLi4vdXRpbC9pc1NjaGVkdWxlcic7XHJcbmltcG9ydCB7IGlzVmFsaWREYXRlIH0gZnJvbSAnLi4vdXRpbC9pc0RhdGUnO1xyXG5leHBvcnQgZnVuY3Rpb24gdGltZXIoZHVlVGltZSwgaW50ZXJ2YWxPclNjaGVkdWxlciwgc2NoZWR1bGVyKSB7XHJcbiAgICBpZiAoZHVlVGltZSA9PT0gdm9pZCAwKSB7IGR1ZVRpbWUgPSAwOyB9XHJcbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXN5bmNTY2hlZHVsZXI7IH1cclxuICAgIHZhciBpbnRlcnZhbER1cmF0aW9uID0gLTE7XHJcbiAgICBpZiAoaW50ZXJ2YWxPclNjaGVkdWxlciAhPSBudWxsKSB7XHJcbiAgICAgICAgaWYgKGlzU2NoZWR1bGVyKGludGVydmFsT3JTY2hlZHVsZXIpKSB7XHJcbiAgICAgICAgICAgIHNjaGVkdWxlciA9IGludGVydmFsT3JTY2hlZHVsZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpbnRlcnZhbER1cmF0aW9uID0gaW50ZXJ2YWxPclNjaGVkdWxlcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcclxuICAgICAgICB2YXIgZHVlID0gaXNWYWxpZERhdGUoZHVlVGltZSkgPyArZHVlVGltZSAtIHNjaGVkdWxlci5ub3coKSA6IGR1ZVRpbWU7XHJcbiAgICAgICAgaWYgKGR1ZSA8IDApIHtcclxuICAgICAgICAgICAgZHVlID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG4gPSAwO1xyXG4gICAgICAgIHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoIXN1YnNjcmliZXIuY2xvc2VkKSB7XHJcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQobisrKTtcclxuICAgICAgICAgICAgICAgIGlmICgwIDw9IGludGVydmFsRHVyYXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlKHVuZGVmaW5lZCwgaW50ZXJ2YWxEdXJhdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBkdWUpO1xyXG4gICAgfSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZXIuanMubWFwIiwiaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XHJcbmV4cG9ydCBmdW5jdGlvbiBpc1NjaGVkdWxlcih2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHZhbHVlICYmIGlzRnVuY3Rpb24odmFsdWUuc2NoZWR1bGUpO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzU2NoZWR1bGVyLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkRGF0ZSh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgRGF0ZSAmJiAhaXNOYU4odmFsdWUpO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzRGF0ZS5qcy5tYXAiLCJpbXBvcnQge2NyZWF0ZUNsaWVudH0gZnJvbSBcIi4vbW9kZWxzL2NsaWVudFN0YXRlXCI7XHJcbmltcG9ydCB7IGNhbGN1bGF0ZSwgY2hlY2tDb2RlLCBsb2dPdXQgfSBmcm9tIFwiLi9jb250cm9sbGVyL29ic2VydmFibGVcIjtcclxuaW1wb3J0IHsgZW52aXJvbm1lbnRzIH0gZnJvbSBcIi4vZW52aXJvbm1lbnRzXCI7XHJcbmltcG9ydCB7IGZpbHRlciB9IGZyb20gXCJyeGpzXCI7XHJcblxyXG5jb25zdCBzdGF0ZSA9IGNyZWF0ZUNsaWVudCgpO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRyYXcoY29udGFpbmVyOkhUTUxFbGVtZW50KXtcclxuICAgIGNvbnN0IG1haW5EaXY6IEhUTUxEaXZFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIG1haW5EaXYuY2xhc3NMaXN0LmFkZChcIm1haW5EaXZcIik7XHJcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQobWFpbkRpdik7ICBcclxuXHJcbiAgICBjb25zdCBmb290ZXJEaXYgOkhUTUxEaXZFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGZvb3RlckRpdi5jbGFzc0xpc3QuYWRkKFwiZm9vdGVyXCIpO1xyXG4gICAgY29uc3QgZm9vdGVyVGV4dCA6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XHJcbiAgICBmb290ZXJUZXh0LmlubmVySFRNTCA9IGVudmlyb25tZW50cy5mb290ZXI7XHJcbiAgICBmb290ZXJEaXYuYXBwZW5kQ2hpbGQoZm9vdGVyVGV4dCk7XHJcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZm9vdGVyRGl2KTtcclxuXHJcbiAgICBjb25zdCBjZW50ZXJEaXY6IEhUTUxEaXZFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGNlbnRlckRpdi5jbGFzc0xpc3QuYWRkKFwiY2VudGVyRGl2XCIpO1xyXG4gICAgbWFpbkRpdi5hcHBlbmRDaGlsZChjZW50ZXJEaXYpOyAgICBcclxuXHJcbiAgICBjb25zdCBvcHRpb25zRGl2OiBIVE1MRGl2RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBvcHRpb25zRGl2LmNsYXNzTGlzdC5hZGQoXCJvcHRpb25zRGl2XCIpO1xyXG4gICAgY2VudGVyRGl2LmFwcGVuZENoaWxkKG9wdGlvbnNEaXYpO1xyXG5cclxuICAgIGNvbnN0IGNvbnRlbnREaXY6IEhUTUxEaXZFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGNvbnRlbnREaXYuY2xhc3NMaXN0LmFkZChcImNvbnRlbnREaXZcIik7XHJcbiAgICBjZW50ZXJEaXYuYXBwZW5kQ2hpbGQoY29udGVudERpdik7XHJcbiAgICBcclxuICAgIGNvbnN0IHRhYnNEaXY6IEhUTUxEaXZFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIHRhYnNEaXYuY2xhc3NMaXN0LmFkZChcInRhYnNEaXZcIik7XHJcbiAgICBvcHRpb25zRGl2LmFwcGVuZENoaWxkKHRhYnNEaXYpOyAgICAgIFxyXG5cclxuICAgIGxldCB0YWI6SFRNTERpdkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgdGFiLmNsYXNzTGlzdC5hZGQoXCJ0YWJcIik7XHJcbiAgICB0YWIuY2xhc3NMaXN0LmFkZChcInNlbGVjdGVkVGFiXCIpO1xyXG4gICAgdGFiLmlubmVySFRNTCA9IFwiRmluZCBwYXJraW5nXCI7XHJcbiAgICB0YWIuc2V0QXR0cmlidXRlKFwiaWRcIixcImZpbmRlci10YWJcIik7XHJcbiAgICB0YWIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldik9PntcclxuICAgICAgICBjaGFuZ2VUYWJUbyhcImZpbmRlci10YWJcIik7XHJcbiAgICB9KTtcclxuICAgIHRhYnNEaXYuYXBwZW5kQ2hpbGQodGFiKTtcclxuXHJcbiAgICB0YWIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgdGFiLmNsYXNzTGlzdC5hZGQoXCJ0YWJcIik7XHJcbiAgICB0YWIuaW5uZXJIVE1MID0gXCJDaGVjayBzdGF0dXNcIjtcclxuICAgIHRhYi5zZXRBdHRyaWJ1dGUoXCJpZFwiLFwiY2hlY2tlci10YWJcIik7XHJcbiAgICB0YWIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldik9PntcclxuICAgICAgICBjaGFuZ2VUYWJUbyhcImNoZWNrZXItdGFiXCIpO1xyXG4gICAgfSk7XHJcbiAgICB0YWJzRGl2LmFwcGVuZENoaWxkKHRhYik7XHJcblxyXG4gICAgY29uc3QgaG9yaXNvbnRhbExpbmU6IEhUTUxEaXZFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGhvcmlzb250YWxMaW5lLmNsYXNzTGlzdC5hZGQoXCJockxpbmVcIik7XHJcbiAgICBvcHRpb25zRGl2LmFwcGVuZENoaWxkKGhvcmlzb250YWxMaW5lKTtcclxuXHJcbiAgICAvL2NvbnRlbnRcclxuICAgIGRyYXdGaW5kZXJDb250ZW50KCk7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBjaGFuZ2VUYWJUbyhuZXdUYWI6IHN0cmluZyl7XHJcbiAgICBpZihzdGF0ZS5jdXJyZW50VGFiICE9PSBuZXdUYWIpe1xyXG4gICAgICAgIGxldCBjdXJyZW50VGFiSHRtbEVsZW1lbnQ6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoc3RhdGUuY3VycmVudFRhYik7XHJcbiAgICAgICAgY3VycmVudFRhYkh0bWxFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJzZWxlY3RlZFRhYlwiKTtcclxuICAgICAgICBsZXQgbmV4dFRhYkh0bWxFbGVtZW50OiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG5ld1RhYik7XHJcbiAgICAgICAgbmV4dFRhYkh0bWxFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJzZWxlY3RlZFRhYlwiKTtcclxuICAgICAgICBzdGF0ZS5jdXJyZW50VGFiID0gbmV3VGFiO1xyXG4gICAgICAgIGlmKHN0YXRlLmN1cnJlbnRUYWIgPT09IFwiZmluZGVyLXRhYlwiKXtcclxuICAgICAgICAgICAgZHJhd0ZpbmRlckNvbnRlbnQoKTtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgZHJhd0NoZWNrZXJDb250ZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3RmluZGVyQ29udGVudCgpe1xyXG4gICAgbGV0IGNvbnRlbnREaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiY29udGVudERpdlwiKVswXTtcclxuICAgIFxyXG4gICAgY29udGVudERpdi5jaGlsZE5vZGVzLmZvckVhY2goKHgpPT57XHJcbiAgICAgICAgY29udGVudERpdi5yZW1vdmVDaGlsZCh4KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGxldCBmaWx0ZXJEaXY6IEhUTUxEaXZFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGZpbHRlckRpdi5jbGFzc0xpc3QuYWRkKFwiZmlsdGVyRGl2XCIpO1xyXG5cclxuICAgIGxldCBsYWJlbCA6IEhUTUxMYWJlbEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICBsYWJlbC5pbm5lckhUTUwgPSBcIkNpdHk6IFwiO1xyXG4gICAgZmlsdGVyRGl2LmFwcGVuZENoaWxkKGxhYmVsKTtcclxuXHJcbiAgICBsZXQgc2VsZWN0Q2l0eTogSFRNTFNlbGVjdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIpO1xyXG4gICAgbGV0IHN0YXRlID0gY3JlYXRlQ2xpZW50KCk7ICAgIFxyXG4gICAgbGV0IHBsYWNlczogc3RyaW5nW10gPSBzdGF0ZS5wbGFjZXM7XHJcbiAgICBsZXQgb3B0aW9uOiBIVE1MT3B0aW9uRWxlbWVudDtcclxuICAgIHBsYWNlcy5mb3JFYWNoKCAocGxhY2UpID0+IHtcclxuICAgICAgICBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xyXG4gICAgICAgIG9wdGlvbi5pbm5lckhUTUwgPSBwbGFjZTtcclxuICAgICAgICBvcHRpb24udmFsdWUgPSBwbGFjZTtcclxuICAgICAgICBzZWxlY3RDaXR5LmFwcGVuZENoaWxkKG9wdGlvbik7XHJcbiAgICB9KTtcclxuICAgIC8vb24gY2hhbmdlIGRhIHBveml2YSBmdW5rY2lqdSBpeiBvYnNlcnZhYmxlIGdkZSBzdGVsdWplIG1hcHVcclxuICAgIGZpbHRlckRpdi5hcHBlbmRDaGlsZChzZWxlY3RDaXR5KTtcclxuXHJcbiAgICBjb250ZW50RGl2LmFwcGVuZENoaWxkKGZpbHRlckRpdik7XHJcblxyXG4gICAgLy9tYXBhXHJcblxyXG5cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRyYXdDaGVja2VyQ29udGVudCgpe1xyXG4gICAgXHJcbiAgICBsZXQgY29udGVudERpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJjb250ZW50RGl2XCIpWzBdO1xyXG5cclxuICAgIGNvbnRlbnREaXYuY2hpbGROb2Rlcy5mb3JFYWNoKCh4KT0+e1xyXG4gICAgICAgIGNvbnRlbnREaXYucmVtb3ZlQ2hpbGQoeCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBsZXQgcGFya2luZ1Nwb3RCb3g6IEhUTUxEaXZFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIHBhcmtpbmdTcG90Qm94LmNsYXNzTGlzdC5hZGQoXCJwYXJraW5nU3BvdEJveFwiKTtcclxuICAgIGlmKHN0YXRlLnBhcmtlZCl7XHJcbiAgICAgICAgcGFya2luZ1Nwb3RCb3guY2xhc3NMaXN0LmFkZChcInBhcmtpbmdTcG90Qm94QWRkaXRpb25cIik7XHJcbiAgICB9XHJcbiAgICBjb250ZW50RGl2LmFwcGVuZENoaWxkKHBhcmtpbmdTcG90Qm94KTtcclxuICAgIGlmKCFzdGF0ZS5wYXJrZWQpe1xyXG4gICAgICAgIGxldCBsYWJlbDogSFRNTExhYmVsRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuICAgICAgICBsYWJlbC5jbGFzc0xpc3QuYWRkKFwiZW50ZXJDb2RlTGFiZWxcIik7XHJcbiAgICAgICAgbGFiZWwuaW5uZXJIVE1MID0gYCR7ZW52aXJvbm1lbnRzLmxhYmVsRW50ZXJDb2RlU3RyaW5nfWA7XHJcbiAgICAgICAgcGFya2luZ1Nwb3RCb3guYXBwZW5kQ2hpbGQobGFiZWwpO1xyXG4gICAgICAgIGxldCBpbnB1dEhhc2hGaWVsZDogSFRNTElucHV0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuICAgICAgICBpbnB1dEhhc2hGaWVsZC5tYXhMZW5ndGggPSBlbnZpcm9ubWVudHMuY29kZUxlbmd0aDtcclxuICAgICAgICBwYXJraW5nU3BvdEJveC5hcHBlbmRDaGlsZChpbnB1dEhhc2hGaWVsZCk7XHJcbiAgICAgICAgY2hlY2tDb2RlKGlucHV0SGFzaEZpZWxkKTtcclxuICAgIH1lbHNle1xyXG4gICAgICAgIGxldCBpbmZvQm94OiBIVE1MRGl2RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgaW5mb0JveC5jbGFzc0xpc3QuYWRkKFwiaW5mb0JveFwiKTtcclxuICAgICAgICBcclxuICAgICAgICBsZXQgbGFiZWw6IEhUTUxMYWJlbEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICAgICAgbGFiZWwuc2V0QXR0cmlidXRlKFwiaWRcIixcInRpbWVTcGVudExhYmVsXCIpO1xyXG4gICAgICAgIGxhYmVsLmNsYXNzTGlzdC5hZGQoXCJpbmZvTGFiZWxcIik7XHJcbiAgICAgICAgaW5mb0JveC5hcHBlbmRDaGlsZChsYWJlbCk7XHJcblxyXG4gICAgICAgIGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xyXG4gICAgICAgIGxhYmVsLnNldEF0dHJpYnV0ZShcImlkXCIsXCJwcmljZUxhYmVsXCIpO1xyXG4gICAgICAgIGxhYmVsLmNsYXNzTGlzdC5hZGQoXCJpbmZvTGFiZWxcIik7XHJcbiAgICAgICAgaW5mb0JveC5hcHBlbmRDaGlsZChsYWJlbCk7XHJcblxyXG4gICAgICAgIGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xyXG4gICAgICAgIGxhYmVsLnNldEF0dHJpYnV0ZShcImlkXCIsXCJyZW1haW5pbmdUaW1lTGFiZWxcIik7XHJcbiAgICAgICAgbGFiZWwuY2xhc3NMaXN0LmFkZChcImluZm9MYWJlbFwiKTtcclxuICAgICAgICBpbmZvQm94LmFwcGVuZENoaWxkKGxhYmVsKTtcclxuXHJcbiAgICAgICAgcGFya2luZ1Nwb3RCb3guYXBwZW5kQ2hpbGQoaW5mb0JveCk7XHJcbiAgICAgICAgbGV0IGxvZ091dEJ1dHRvbiA6IEhUTUxCdXR0b25FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcclxuICAgICAgICBsb2dPdXRCdXR0b24uaW5uZXJIVE1MID0gXCJQYXlcIjsgICAgICAgIFxyXG4gICAgICAgIHBhcmtpbmdTcG90Qm94LmFwcGVuZENoaWxkKGxvZ091dEJ1dHRvbik7XHJcblxyXG4gICAgICAgIGxldCBzdWIgPSBjYWxjdWxhdGUoKTtcclxuXHJcbiAgICAgICAgbG9nT3V0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXYpPT57XHJcbiAgICAgICAgICAgIGxvZ091dChzdWIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2hvd0N1cnJlbnRTdGF0ZShvdXRwdXQ6IFtzdHJpbmcsIHN0cmluZywgbnVtYmVyLCBib29sZWFuXSl7XHJcbiAgICBsZXQgc3RhdGUgPSBjcmVhdGVDbGllbnQoKTsgICAgXHJcbiAgICBsZXQgZHVyYXRpb24gPSBvdXRwdXRbMF07XHJcbiAgICBzdGF0ZS5wcmljZSA9IG91dHB1dFsyXTtcclxuICAgIGxldCBsYWJlbFRpbWUgOiBIVE1MRWxlbWVudD0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0aW1lU3BlbnRMYWJlbFwiKTtcclxuICAgIGxldCBsYWJlbFByaWNlIDogSFRNTEVsZW1lbnQ9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicHJpY2VMYWJlbFwiKTtcclxuICAgIGxldCBsYWJlbFJlbWFpbmluZ1RpbWUgOiBIVE1MRWxlbWVudD0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZW1haW5pbmdUaW1lTGFiZWxcIik7XHJcbiAgICBpZihvdXRwdXRbM10pe1xyXG4gICAgICAgIGxhYmVsVGltZS5jbGFzc0xpc3QuYWRkKFwiaW5mb0xhYmVsUGVuYWx0eVwiKTtcclxuICAgICAgICBsYWJlbFByaWNlLmNsYXNzTGlzdC5hZGQoXCJpbmZvTGFiZWxQZW5hbHR5XCIpO1xyXG4gICAgICAgIGxhYmVsUmVtYWluaW5nVGltZS5pbm5lckhUTUwgPSBgJHtlbnZpcm9ubWVudHMubGFiZWxSZW1haW5pbmdUaW1lUGVuYWx0eVN0cmluZ31gO1xyXG4gICAgICAgIGxhYmVsUmVtYWluaW5nVGltZS5jbGFzc0xpc3QuYWRkKFwiaW5mb0xhYmVsUGVuYWx0eVwiKTtcclxuICAgIH1lbHNle1xyXG4gICAgICAgIGxhYmVsUmVtYWluaW5nVGltZS5pbm5lckhUTUwgPSBgJHtlbnZpcm9ubWVudHMubGFiZWxSZW1haW5pbmdUaW1lU3RyaW5nfSR7b3V0cHV0WzFdfWA7XHJcbiAgICB9XHJcbiAgICBsYWJlbFRpbWUuaW5uZXJIVE1MID0gYCR7ZW52aXJvbm1lbnRzLmxhYmVsVGltZVN0cmluZ30ke2R1cmF0aW9ufWA7XHJcbiAgICBsYWJlbFByaWNlLmlubmVySFRNTCA9IGAke2Vudmlyb25tZW50cy5sYWJlbFByaWNlU3RyaW5nfSR7c3RhdGUucHJpY2V9ICR7ZW52aXJvbm1lbnRzLmN1cnJlbmN5fWA7XHJcbn0iLCJpbXBvcnQge2Vudmlyb25tZW50c30gZnJvbSBcIi4uL2Vudmlyb25tZW50c1wiO1xyXG5pbXBvcnQgeyBQYXJraW5nU3BvdCB9IGZyb20gXCIuL1BhcmtpbmdTcG90XCI7XHJcbmltcG9ydCB7ZmV0Y2hQbGFjZXN9IGZyb20gXCIuLi9jb250cm9sbGVyL29ic2VydmFibGVcIjtcclxuaW1wb3J0IHsgUGxhY2UgfSBmcm9tIFwiLi4vbW9kZWxzL1BsYWNlXCI7XHJcblxyXG5sZXQgc3RhdGU6IGNsaWVudFN0YXRlID0gdW5kZWZpbmVkO1xyXG5cclxuY2xhc3MgY2xpZW50U3RhdGV7XHJcbiAgICBjdXJyZW50VGFiOiBzdHJpbmc7XHJcbiAgICBwYXJrZWQ6Ym9vbGVhbjtcclxuICAgIHBhcmtpbmdTcG90OiBQYXJraW5nU3BvdDtcclxuICAgIHByaWNlOiBudW1iZXI7XHJcbiAgICAvL3BsYWNlc0xpc3Q6IHN0cmluZ1tdO1xyXG4gICAgcGxhY2VzTGlzdDogUGxhY2VbXTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihjdXJyVGFiOnN0cmluZyl7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50VGFiID0gY3VyclRhYjtcclxuICAgICAgICB0aGlzLnBhcmtlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMucGFya2luZ1Nwb3QgPSBudWxsO1xyXG4gICAgICAgIHRoaXMucGxhY2VzTGlzdCA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwbGFjZXMoKTogc3RyaW5nW117XHJcbiAgICAgICAgaWYodGhpcy5wbGFjZXNMaXN0Lmxlbmd0aCA9PT0gMCl7XHJcbiAgICAgICAgICAgIHRoaXMucGxhY2VzTGlzdCA9IGZldGNoUGxhY2VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBwbGFjZU5hbWVzOiBzdHJpbmdbXSA9IFtdXHJcbiAgICAgICAgdGhpcy5wbGFjZXNMaXN0Lm1hcCggKHBsYWNlOiBQbGFjZSkgPT4gIGNvbnNvbGUubG9nKHBsYWNlLm5hbWUpICk7XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZyh0aGlzLnBsYWNlc0xpc3QpO1xyXG4gICAgICAgIHJldHVybiBwbGFjZU5hbWVzO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ2xpZW50KCk6IGNsaWVudFN0YXRle1xyXG4gICAgaWYoc3RhdGUgPT09IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgc3RhdGUgPSBuZXcgY2xpZW50U3RhdGUoZW52aXJvbm1lbnRzLmluaXRpYWxUYWIpO1xyXG4gICAgfSAgICBcclxuICAgIHJldHVybiBzdGF0ZTtcclxufVxyXG5cclxuLy9leHBvcnQgY29uc3Qgc3RhdGUgPSBuZXcgY2xpZW50U3RhdGUoZW52aXJvbm1lbnRzLmluaXRpYWxUYWIpOyIsImltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvaW5uZXJGcm9tJztcclxuaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XHJcbmltcG9ydCB7IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4vT3BlcmF0b3JTdWJzY3JpYmVyJztcclxuZXhwb3J0IGZ1bmN0aW9uIHN3aXRjaE1hcChwcm9qZWN0LCByZXN1bHRTZWxlY3Rvcikge1xyXG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xyXG4gICAgICAgIHZhciBpbm5lclN1YnNjcmliZXIgPSBudWxsO1xyXG4gICAgICAgIHZhciBpbmRleCA9IDA7XHJcbiAgICAgICAgdmFyIGlzQ29tcGxldGUgPSBmYWxzZTtcclxuICAgICAgICB2YXIgY2hlY2tDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlzQ29tcGxldGUgJiYgIWlubmVyU3Vic2NyaWJlciAmJiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7IH07XHJcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlubmVyU3Vic2NyaWJlciA9PT0gbnVsbCB8fCBpbm5lclN1YnNjcmliZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGlubmVyU3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICB2YXIgaW5uZXJJbmRleCA9IDA7XHJcbiAgICAgICAgICAgIHZhciBvdXRlckluZGV4ID0gaW5kZXgrKztcclxuICAgICAgICAgICAgaW5uZXJGcm9tKHByb2plY3QodmFsdWUsIG91dGVySW5kZXgpKS5zdWJzY3JpYmUoKGlubmVyU3Vic2NyaWJlciA9IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAoaW5uZXJWYWx1ZSkgeyByZXR1cm4gc3Vic2NyaWJlci5uZXh0KHJlc3VsdFNlbGVjdG9yID8gcmVzdWx0U2VsZWN0b3IodmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgrKykgOiBpbm5lclZhbHVlKTsgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaW5uZXJTdWJzY3JpYmVyID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGNoZWNrQ29tcGxldGUoKTtcclxuICAgICAgICAgICAgfSkpKTtcclxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlzQ29tcGxldGUgPSB0cnVlO1xyXG4gICAgICAgICAgICBjaGVja0NvbXBsZXRlKCk7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgfSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3dpdGNoTWFwLmpzLm1hcCIsImltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xyXG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XHJcbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXIocHJlZGljYXRlLCB0aGlzQXJnKSB7XHJcbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XHJcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcclxuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHByZWRpY2F0ZS5jYWxsKHRoaXNBcmcsIHZhbHVlLCBpbmRleCsrKSAmJiBzdWJzY3JpYmVyLm5leHQodmFsdWUpOyB9KSk7XHJcbiAgICB9KTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1maWx0ZXIuanMubWFwIiwiaW1wb3J0IHsgYXN5bmNTY2hlZHVsZXIgfSBmcm9tICcuLi9zY2hlZHVsZXIvYXN5bmMnO1xyXG5pbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcclxuaW1wb3J0IHsgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xyXG5leHBvcnQgZnVuY3Rpb24gZGVib3VuY2VUaW1lKGR1ZVRpbWUsIHNjaGVkdWxlcikge1xyXG4gICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7IHNjaGVkdWxlciA9IGFzeW5jU2NoZWR1bGVyOyB9XHJcbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XHJcbiAgICAgICAgdmFyIGFjdGl2ZVRhc2sgPSBudWxsO1xyXG4gICAgICAgIHZhciBsYXN0VmFsdWUgPSBudWxsO1xyXG4gICAgICAgIHZhciBsYXN0VGltZSA9IG51bGw7XHJcbiAgICAgICAgdmFyIGVtaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChhY3RpdmVUYXNrKSB7XHJcbiAgICAgICAgICAgICAgICBhY3RpdmVUYXNrLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgICAgICBhY3RpdmVUYXNrID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGxhc3RWYWx1ZTtcclxuICAgICAgICAgICAgICAgIGxhc3RWYWx1ZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBmdW5jdGlvbiBlbWl0V2hlbklkbGUoKSB7XHJcbiAgICAgICAgICAgIHZhciB0YXJnZXRUaW1lID0gbGFzdFRpbWUgKyBkdWVUaW1lO1xyXG4gICAgICAgICAgICB2YXIgbm93ID0gc2NoZWR1bGVyLm5vdygpO1xyXG4gICAgICAgICAgICBpZiAobm93IDwgdGFyZ2V0VGltZSkge1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlVGFzayA9IHRoaXMuc2NoZWR1bGUodW5kZWZpbmVkLCB0YXJnZXRUaW1lIC0gbm93KTtcclxuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuYWRkKGFjdGl2ZVRhc2spO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVtaXQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGxhc3RWYWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICBsYXN0VGltZSA9IHNjaGVkdWxlci5ub3coKTtcclxuICAgICAgICAgICAgaWYgKCFhY3RpdmVUYXNrKSB7XHJcbiAgICAgICAgICAgICAgICBhY3RpdmVUYXNrID0gc2NoZWR1bGVyLnNjaGVkdWxlKGVtaXRXaGVuSWRsZSwgZHVlVGltZSk7XHJcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmFkZChhY3RpdmVUYXNrKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZW1pdCgpO1xyXG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgfSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGxhc3RWYWx1ZSA9IGFjdGl2ZVRhc2sgPSBudWxsO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH0pO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYm91bmNlVGltZS5qcy5tYXAiLCJpbXBvcnQge1xyXG4gICAgZHJhd1xyXG59IGZyb20gXCIuL2RyYXdpbmdcIjtcclxuaW1wb3J0e2NyZWF0ZUNsaWVudH0gZnJvbSBcIi4vbW9kZWxzL2NsaWVudFN0YXRlXCI7XHJcblxyXG5jb25zdCBzdGF0ZSA9IGNyZWF0ZUNsaWVudCgpO1xyXG5cclxuZHJhdyhkb2N1bWVudC5ib2R5KTsiXSwibmFtZXMiOlsiZW52aXJvbm1lbnRzIiwiZXh0ZW5kU3RhdGljcyIsImQiLCJiIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsInAiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJfX2V4dGVuZHMiLCJUeXBlRXJyb3IiLCJTdHJpbmciLCJfXyIsInRoaXMiLCJjb25zdHJ1Y3RvciIsImNyZWF0ZSIsIl9fZ2VuZXJhdG9yIiwidGhpc0FyZyIsImJvZHkiLCJmIiwieSIsInQiLCJnIiwiXyIsImxhYmVsIiwic2VudCIsInRyeXMiLCJvcHMiLCJuZXh0IiwidmVyYiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwibiIsInYiLCJvcCIsImRvbmUiLCJ2YWx1ZSIsInBvcCIsImxlbmd0aCIsInB1c2giLCJlIiwic3RlcCIsIl9fdmFsdWVzIiwibyIsInMiLCJtIiwiaSIsIl9fcmVhZCIsInIiLCJhciIsImVycm9yIiwiX19zcHJlYWRBcnJheSIsInRvIiwiZnJvbSIsInBhY2siLCJhcmd1bWVudHMiLCJsIiwic2xpY2UiLCJjb25jYXQiLCJfX2F3YWl0IiwiX19hc3luY0dlbmVyYXRvciIsIl9hcmd1bWVudHMiLCJnZW5lcmF0b3IiLCJhc3luY0l0ZXJhdG9yIiwiYXBwbHkiLCJxIiwiUHJvbWlzZSIsImEiLCJyZXN1bWUiLCJyZXNvbHZlIiwidGhlbiIsImZ1bGZpbGwiLCJyZWplY3QiLCJzZXR0bGUiLCJzaGlmdCIsImlzQXJyYXlMaWtlIiwieCIsImlzRnVuY3Rpb24iLCJpc1Byb21pc2UiLCJjdG9yRnVuYyIsIlVuc3Vic2NyaXB0aW9uRXJyb3IiLCJfc3VwZXIiLCJlcnJvcnMiLCJtZXNzYWdlIiwibWFwIiwiZXJyIiwidG9TdHJpbmciLCJqb2luIiwibmFtZSIsImNyZWF0ZUltcGwiLCJpbnN0YW5jZSIsIkVycm9yIiwic3RhY2siLCJhcnJSZW1vdmUiLCJhcnIiLCJpdGVtIiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiU3Vic2NyaXB0aW9uIiwiaW5pdGlhbFRlYXJkb3duIiwiY2xvc2VkIiwiX3BhcmVudGFnZSIsIl9maW5hbGl6ZXJzIiwiZW1wdHkiLCJ1bnN1YnNjcmliZSIsImVfMSIsIl9hIiwiZV8yIiwiX2IiLCJpc0FycmF5IiwiX3BhcmVudGFnZV8xIiwiX3BhcmVudGFnZV8xXzEiLCJyZW1vdmUiLCJlXzFfMSIsInJldHVybiIsImluaXRpYWxGaW5hbGl6ZXIiLCJfZmluYWxpemVyc18xIiwiX2ZpbmFsaXplcnNfMV8xIiwiZmluYWxpemVyIiwiZXhlY0ZpbmFsaXplciIsImVfMl8xIiwiYWRkIiwidGVhcmRvd24iLCJfaGFzUGFyZW50IiwiX2FkZFBhcmVudCIsInBhcmVudCIsImluY2x1ZGVzIiwiX3JlbW92ZVBhcmVudCIsIkVNUFRZIiwiaXNTdWJzY3JpcHRpb24iLCJjb25maWciLCJ1bmRlZmluZWQiLCJ0aW1lb3V0UHJvdmlkZXIiLCJzZXRUaW1lb3V0IiwiaGFuZGxlciIsInRpbWVvdXQiLCJhcmdzIiwiX2kiLCJkZWxlZ2F0ZSIsImNsZWFyVGltZW91dCIsImhhbmRsZSIsInJlcG9ydFVuaGFuZGxlZEVycm9yIiwibm9vcCIsIkNPTVBMRVRFX05PVElGSUNBVElPTiIsImNyZWF0ZU5vdGlmaWNhdGlvbiIsImtpbmQiLCJjb250ZXh0IiwiU3Vic2NyaWJlciIsImRlc3RpbmF0aW9uIiwiX3RoaXMiLCJpc1N0b3BwZWQiLCJFTVBUWV9PQlNFUlZFUiIsImNvbXBsZXRlIiwiU2FmZVN1YnNjcmliZXIiLCJoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uIiwibmV4dE5vdGlmaWNhdGlvbiIsIl9uZXh0IiwiX2Vycm9yIiwiX2NvbXBsZXRlIiwiX2JpbmQiLCJGdW5jdGlvbiIsImJpbmQiLCJmbiIsIkNvbnN1bWVyT2JzZXJ2ZXIiLCJwYXJ0aWFsT2JzZXJ2ZXIiLCJoYW5kbGVVbmhhbmRsZWRFcnJvciIsIm9ic2VydmVyT3JOZXh0IiwiY29udGV4dF8xIiwiZXJyb3JUaHJvd24iLCJub3RpZmljYXRpb24iLCJzdWJzY3JpYmVyIiwib25TdG9wcGVkTm90aWZpY2F0aW9uIiwib2JzZXJ2YWJsZSIsImlkZW50aXR5IiwicGlwZUZyb21BcnJheSIsImZucyIsImlucHV0IiwicmVkdWNlIiwicHJldiIsIk9ic2VydmFibGUiLCJzdWJzY3JpYmUiLCJfc3Vic2NyaWJlIiwibGlmdCIsIm9wZXJhdG9yIiwic291cmNlIiwiaXNPYnNlcnZlciIsImNiIiwiaXNSb290IiwiZXJyb3JDb250ZXh0IiwiX3RyeVN1YnNjcmliZSIsInNpbmsiLCJmb3JFYWNoIiwicHJvbWlzZUN0b3IiLCJnZXRQcm9taXNlQ3RvciIsInBpcGUiLCJvcGVyYXRpb25zIiwidG9Qcm9taXNlIiwiaXNJbnRlcm9wT2JzZXJ2YWJsZSIsImlzQXN5bmNJdGVyYWJsZSIsIm9iaiIsImNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yIiwiaXNJdGVyYWJsZSIsInJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IiLCJyZWFkYWJsZVN0cmVhbSIsInJlYWRlciIsImdldFJlYWRlciIsInJlYWQiLCJyZWxlYXNlTG9jayIsImlzUmVhZGFibGVTdHJlYW1MaWtlIiwiaW5uZXJGcm9tIiwib2JzIiwiYXJyYXkiLCJwcm9taXNlIiwiZnJvbUFzeW5jSXRlcmFibGUiLCJpdGVyYWJsZSIsIml0ZXJhYmxlXzEiLCJpdGVyYWJsZV8xXzEiLCJhc3luY0l0ZXJhYmxlIiwiYXN5bmNJdGVyYWJsZV8xIiwiYXN5bmNJdGVyYWJsZV8xXzEiLCJQIiwiX19hc3luY1ZhbHVlcyIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwicmVzdWx0IiwicHJvY2VzcyIsImNhdGNoIiwib3BlcmF0ZSIsImluaXQiLCJoYXNMaWZ0IiwibGlmdGVkU291cmNlIiwiY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIiwib25OZXh0Iiwib25Db21wbGV0ZSIsIm9uRXJyb3IiLCJvbkZpbmFsaXplIiwiT3BlcmF0b3JTdWJzY3JpYmVyIiwic2hvdWxkVW5zdWJzY3JpYmUiLCJjbG9zZWRfMSIsInByb2plY3QiLCJleGVjdXRlU2NoZWR1bGUiLCJwYXJlbnRTdWJzY3JpcHRpb24iLCJzY2hlZHVsZXIiLCJ3b3JrIiwiZGVsYXkiLCJyZXBlYXQiLCJzY2hlZHVsZVN1YnNjcmlwdGlvbiIsInNjaGVkdWxlIiwibWVyZ2VNYXAiLCJyZXN1bHRTZWxlY3RvciIsImNvbmN1cnJlbnQiLCJJbmZpbml0eSIsImlpIiwib25CZWZvcmVOZXh0IiwiZXhwYW5kIiwiaW5uZXJTdWJTY2hlZHVsZXIiLCJhZGRpdGlvbmFsRmluYWxpemVyIiwiYnVmZmVyIiwiYWN0aXZlIiwiaXNDb21wbGV0ZSIsImNoZWNrQ29tcGxldGUiLCJvdXRlck5leHQiLCJkb0lubmVyU3ViIiwiaW5uZXJDb21wbGV0ZSIsImlubmVyVmFsdWUiLCJidWZmZXJlZFZhbHVlIiwibWVyZ2VJbnRlcm5hbHMiLCJub2RlRXZlbnRFbWl0dGVyTWV0aG9kcyIsImV2ZW50VGFyZ2V0TWV0aG9kcyIsImpxdWVyeU1ldGhvZHMiLCJmcm9tRXZlbnQiLCJ0YXJnZXQiLCJldmVudE5hbWUiLCJvcHRpb25zIiwiY2FsbE9yQXBwbHkiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImlzRXZlbnRUYXJnZXQiLCJtZXRob2ROYW1lIiwiYWRkTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsImlzTm9kZVN0eWxlRXZlbnRFbWl0dGVyIiwidG9Db21tb25IYW5kbGVyUmVnaXN0cnkiLCJvbiIsIm9mZiIsImlzSlF1ZXJ5U3R5bGVFdmVudEVtaXR0ZXIiLCJzdWJUYXJnZXQiLCJBY3Rpb24iLCJzdGF0ZSIsImludGVydmFsUHJvdmlkZXIiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJBc3luY0FjdGlvbiIsInBlbmRpbmciLCJpZCIsInJlY3ljbGVBc3luY0lkIiwicmVxdWVzdEFzeW5jSWQiLCJfaWQiLCJmbHVzaCIsIl9zY2hlZHVsZXIiLCJleGVjdXRlIiwiX2V4ZWN1dGUiLCJfZGVsYXkiLCJlcnJvclZhbHVlIiwiZXJyb3JlZCIsImFjdGlvbnMiLCJkYXRlVGltZXN0YW1wUHJvdmlkZXIiLCJub3ciLCJEYXRlIiwiU2NoZWR1bGVyIiwic2NoZWR1bGVyQWN0aW9uQ3RvciIsImFzeW5jU2NoZWR1bGVyIiwiQXN5bmNTY2hlZHVsZXIiLCJTY2hlZHVsZXJBY3Rpb24iLCJfYWN0aXZlIiwiX3NjaGVkdWxlZCIsImFjdGlvbiIsIm9ic2VydmVPbiIsInN1YnNjcmliZU9uIiwic2NoZWR1bGVBc3luY0l0ZXJhYmxlIiwic2NoZWR1bGVPYnNlcnZhYmxlIiwic2NoZWR1bGVBcnJheSIsInNjaGVkdWxlUHJvbWlzZSIsInNjaGVkdWxlSXRlcmFibGUiLCJzY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZSIsInNjaGVkdWxlZCIsIl9wYXJraW5nSGFzaCIsIl90aW1lT2NjdXBpZWQiLCJfem9uZSIsIl90YXJpZmYiLCJfcGVuYWx0eUluZGV4IiwiX21heFRpbWUiLCJfY2l0eSIsIl9sb2NhdGlvblgiLCJfbG9jYXRpb25ZIiwicGFya2luZ0hhc2giLCJjaXR5IiwidGltZU9jY3VwaWVkIiwiem9uZSIsInRhcmlmZiIsInBlbmFsdHlJbmRleCIsIm1heFRpbWUiLCJsb2NhdGlvblgiLCJsb2NhdGlvblkiLCJjYWxjdWxhdGUiLCJjcmVhdGVDbGllbnQiLCJwZXJpb2QiLCJkdXJTIiwidG1wRGF0ZSIsInRtcEgiLCJnZXRIb3VycyIsInRtcE0iLCJnZXRNaW51dGVzIiwidG1wUyIsImdldFNlY29uZHMiLCJ0aW1lT2NjdXBpZWRTcGxpdGVkIiwicGFya2luZ1Nwb3QiLCJzcGxpdCIsInBhcnNlSW50IiwiY2FsY3VsYXRlRHVyYXRpb25JblNlY29uZHMiLCJzdWIiLCJkdWVUaW1lIiwiaW50ZXJ2YWxPclNjaGVkdWxlciIsImludGVydmFsRHVyYXRpb24iLCJkdWUiLCJpc05hTiIsImlzVmFsaWREYXRlIiwidGltZXIiLCJyZXMiLCJwZW5hbHR5IiwiTWF0aCIsImZsb29yIiwicmVtYWluaW5nVGltZSIsInJvdW5kIiwiY2FsY3VsYXRlVGltZUFuZFByaWNlIiwib3V0cHV0IiwiZHVyYXRpb24iLCJwcmljZSIsImxhYmVsVGltZSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJsYWJlbFByaWNlIiwibGFiZWxSZW1haW5pbmdUaW1lIiwiY2xhc3NMaXN0IiwiaW5uZXJIVE1MIiwic2hvd0N1cnJlbnRTdGF0ZSIsImN1cnJUYWIiLCJjdXJyZW50VGFiIiwicGFya2VkIiwicGxhY2VzTGlzdCIsInVybCIsImZldGNoIiwicmVzcG9uc2UiLCJqc29uIiwibGlzdCIsImNvbnNvbGUiLCJsb2ciLCJwbGFjZSIsImNsaWVudFN0YXRlIiwiY2hhbmdlVGFiVG8iLCJuZXdUYWIiLCJkcmF3RmluZGVyQ29udGVudCIsImRyYXdDaGVja2VyQ29udGVudCIsImNvbnRlbnREaXYiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiY2hpbGROb2RlcyIsInJlbW92ZUNoaWxkIiwiZmlsdGVyRGl2IiwiY3JlYXRlRWxlbWVudCIsImFwcGVuZENoaWxkIiwib3B0aW9uIiwic2VsZWN0Q2l0eSIsInBsYWNlcyIsInByZWRpY2F0ZSIsInBhcmtpbmdTcG90Qm94IiwiaW5mb0JveCIsInNldEF0dHJpYnV0ZSIsImxvZ091dEJ1dHRvbiIsImV2IiwibWV0aG9kIiwiaGVhZGVycyIsIkpTT04iLCJzdHJpbmdpZnkiLCJjb2RlIiwib2NjdXBpZWQiLCJmcmVlUGFya2luZyIsImluZm8iLCJhbGVydCIsImxvZ091dCIsImlucHV0SGFzaEZpZWxkIiwibWF4TGVuZ3RoIiwiYWN0aXZlVGFzayIsImxhc3RWYWx1ZSIsImxhc3RUaW1lIiwiZW1pdCIsImVtaXRXaGVuSWRsZSIsInRhcmdldFRpbWUiLCJ0ZXh0Iiwib2siLCJpbm5lclN1YnNjcmliZXIiLCJQYXJraW5nU3BvdCIsImNvbnRhaW5lciIsIm1haW5EaXYiLCJmb290ZXJEaXYiLCJmb290ZXJUZXh0IiwiY2VudGVyRGl2Iiwib3B0aW9uc0RpdiIsInRhYnNEaXYiLCJ0YWIiLCJob3Jpc29udGFsTGluZSIsImRyYXciXSwic291cmNlUm9vdCI6IiJ9