(()=>{"use strict";var t=void 0,e=function(t){this.currentTab=t,this.parked=!1,this.parkingSpot=null};function n(){return void 0===t&&(t=new e("finder-tab")),t}var r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},r(t,e)};function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function o(t,e){var n,r,i,o,c={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;c;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return c.label++,{value:o[1],done:!1};case 5:c.label++,r=o[1],o=[0];continue;case 7:o=c.ops.pop(),c.trys.pop();continue;default:if(!((i=(i=c.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){c=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){c.label=o[1];break}if(6===o[0]&&c.label<i[1]){c.label=i[1],i=o;break}if(i&&c.label<i[2]){c.label=i[2],c.ops.push(o);break}i[2]&&c.ops.pop(),c.trys.pop();continue}o=e.call(t,c)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}}function c(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function u(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),c=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)c.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return c}function a(t,e,n){if(n||2===arguments.length)for(var r,i=0,o=e.length;i<o;i++)!r&&i in e||(r||(r=Array.prototype.slice.call(e,0,i)),r[i]=e[i]);return t.concat(r||Array.prototype.slice.call(e))}function s(t){return this instanceof s?(this.v=t,this):new s(t)}function l(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(t,e||[]),o=[];return r={},c("next"),c("throw"),c("return"),r[Symbol.asyncIterator]=function(){return this},r;function c(t){i[t]&&(r[t]=function(e){return new Promise((function(n,r){o.push([t,e,n,r])>1||u(t,e)}))})}function u(t,e){try{(n=i[t](e)).value instanceof s?Promise.resolve(n.value.v).then(a,l):f(o[0][2],n)}catch(t){f(o[0][3],t)}var n}function a(t){u("next",t)}function l(t){u("throw",t)}function f(t,e){t(e),o.shift(),o.length&&u(o[0][0],o[0][1])}}Object.create,Object.create;var f=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function d(t){return"function"==typeof t}function h(t){return d(null==t?void 0:t.then)}var p,v=((p=function(t){return function(e){t(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}}((function(t){Error.call(t),t.stack=(new Error).stack}))).prototype=Object.create(Error.prototype),p.prototype.constructor=p,p);function y(t,e){if(t){var n=t.indexOf(e);0<=n&&t.splice(n,1)}}var b=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}var e;return t.prototype.unsubscribe=function(){var t,e,n,r,i;if(!this.closed){this.closed=!0;var o=this._parentage;if(o)if(this._parentage=null,Array.isArray(o))try{for(var s=c(o),l=s.next();!l.done;l=s.next())l.value.remove(this)}catch(e){t={error:e}}finally{try{l&&!l.done&&(e=s.return)&&e.call(s)}finally{if(t)throw t.error}}else o.remove(this);var f=this.initialTeardown;if(d(f))try{f()}catch(t){i=t instanceof v?t.errors:[t]}var h=this._finalizers;if(h){this._finalizers=null;try{for(var p=c(h),y=p.next();!y.done;y=p.next()){var b=y.value;try{w(b)}catch(t){i=null!=i?i:[],t instanceof v?i=a(a([],u(i)),u(t.errors)):i.push(t)}}}catch(t){n={error:t}}finally{try{y&&!y.done&&(r=p.return)&&r.call(p)}finally{if(n)throw n.error}}}if(i)throw new v(i)}},t.prototype.add=function(e){var n;if(e&&e!==this)if(this.closed)w(e);else{if(e instanceof t){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(e)}},t.prototype._hasParent=function(t){var e=this._parentage;return e===t||Array.isArray(e)&&e.includes(t)},t.prototype._addParent=function(t){var e=this._parentage;this._parentage=Array.isArray(e)?(e.push(t),e):e?[e,t]:t},t.prototype._removeParent=function(t){var e=this._parentage;e===t?this._parentage=null:Array.isArray(e)&&y(e,t)},t.prototype.remove=function(e){var n=this._finalizers;n&&y(n,e),e instanceof t&&e._removeParent(this)},t.EMPTY=((e=new t).closed=!0,e),t}();function m(t){return t instanceof b||t&&"closed"in t&&d(t.remove)&&d(t.add)&&d(t.unsubscribe)}function w(t){d(t)?t():t.unsubscribe()}b.EMPTY;var g=null,x=null,E=void 0,_=!1,L=!1,S={setTimeout:function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i=S.delegate;return(null==i?void 0:i.setTimeout)?i.setTimeout.apply(i,a([t,e],u(n))):setTimeout.apply(void 0,a([t,e],u(n)))},clearTimeout:function(t){var e=S.delegate;return((null==e?void 0:e.clearTimeout)||clearTimeout)(t)},delegate:void 0};function T(t){S.setTimeout((function(){if(!g)throw t;g(t)}))}function k(){}var I=A("C",void 0,void 0);function A(t,e,n){return{kind:t,value:e,error:n}}var C=null,P=function(t){function e(e){var n=t.call(this)||this;return n.isStopped=!1,e?(n.destination=e,m(e)&&e.add(n)):n.destination=B,n}return i(e,t),e.create=function(t,e,n){return new D(t,e,n)},e.prototype.next=function(t){this.isStopped?M(function(t){return A("N",t,void 0)}(t),this):this._next(t)},e.prototype.error=function(t){this.isStopped?M(A("E",void 0,t),this):(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped?M(I,this):(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},e.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},e}(b),O=Function.prototype.bind;function j(t,e){return O.call(t,e)}var z=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var e=this.partialObserver;if(e.next)try{e.next(t)}catch(t){H(t)}},t.prototype.error=function(t){var e=this.partialObserver;if(e.error)try{e.error(t)}catch(t){H(t)}else H(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){H(t)}},t}(),D=function(t){function e(e,n,r){var i,o,c=t.call(this)||this;return d(e)||!e?i={next:null!=e?e:void 0,error:null!=n?n:void 0,complete:null!=r?r:void 0}:c&&L?((o=Object.create(e)).unsubscribe=function(){return c.unsubscribe()},i={next:e.next&&j(e.next,o),error:e.error&&j(e.error,o),complete:e.complete&&j(e.complete,o)}):i=e,c.destination=new z(i),c}return i(e,t),e}(P);function H(t){var e;_?(e=t,_&&C&&(C.errorThrown=!0,C.error=e)):T(t)}function M(t,e){var n=x;n&&S.setTimeout((function(){return n(t,e)}))}var B={closed:!0,next:k,error:function(t){throw t},complete:k},N="function"==typeof Symbol&&Symbol.observable||"@@observable";function U(t){return t}function F(t){return 0===t.length?U:1===t.length?t[0]:function(e){return t.reduce((function(t,e){return e(t)}),e)}}var R=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r,i=this,o=(r=t)&&r instanceof P||function(t){return t&&d(t.next)&&d(t.error)&&d(t.complete)}(r)&&m(r)?t:new D(t,e,n);return function(t){if(_){var e=!C;if(e&&(C={errorThrown:!1,error:null}),t(),e){var n=C,r=n.errorThrown,i=n.error;if(C=null,r)throw i}}else t()}((function(){var t=i,e=t.operator,n=t.source;o.add(e?e.call(o,n):n?i._subscribe(o):i._trySubscribe(o))})),o},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){t.error(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=Y(e))((function(e,r){var i=new D({next:function(e){try{t(e)}catch(t){r(t),i.unsubscribe()}},error:r,complete:e});n.subscribe(i)}))},t.prototype._subscribe=function(t){var e;return null===(e=this.source)||void 0===e?void 0:e.subscribe(t)},t.prototype[N]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return F(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=Y(t))((function(t,n){var r;e.subscribe((function(t){return r=t}),(function(t){return n(t)}),(function(){return t(r)}))}))},t.create=function(e){return new t(e)},t}();function Y(t){var e;return null!==(e=null!=t?t:E)&&void 0!==e?e:Promise}function q(t){return d(t[N])}function G(t){return Symbol.asyncIterator&&d(null==t?void 0:t[Symbol.asyncIterator])}function J(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var K="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function Q(t){return d(null==t?void 0:t[K])}function V(t){return l(this,arguments,(function(){var e,n,r;return o(this,(function(i){switch(i.label){case 0:e=t.getReader(),i.label=1;case 1:i.trys.push([1,,9,10]),i.label=2;case 2:return[4,s(e.read())];case 3:return n=i.sent(),r=n.value,n.done?[4,s(void 0)]:[3,5];case 4:return[2,i.sent()];case 5:return[4,s(r)];case 6:return[4,i.sent()];case 7:return i.sent(),[3,2];case 8:return[3,10];case 9:return e.releaseLock(),[7];case 10:return[2]}}))}))}function W(t){return d(null==t?void 0:t.getReader)}function X(t){if(t instanceof R)return t;if(null!=t){if(q(t))return i=t,new R((function(t){var e=i[N]();if(d(e.subscribe))return e.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(f(t))return r=t,new R((function(t){for(var e=0;e<r.length&&!t.closed;e++)t.next(r[e]);t.complete()}));if(h(t))return n=t,new R((function(t){n.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,T)}));if(G(t))return Z(t);if(Q(t))return e=t,new R((function(t){var n,r;try{for(var i=c(e),o=i.next();!o.done;o=i.next()){var u=o.value;if(t.next(u),t.closed)return}}catch(t){n={error:t}}finally{try{o&&!o.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}t.complete()}));if(W(t))return Z(V(t))}var e,n,r,i;throw J(t)}function Z(t){return new R((function(e){(function(t,e){var n,r,i,u,a,s,l,f;return a=this,s=void 0,f=function(){var a,s;return o(this,(function(o){switch(o.label){case 0:o.trys.push([0,5,6,11]),n=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=c(t),e={},r("next"),r("throw"),r("return"),e[Symbol.asyncIterator]=function(){return this},e);function r(n){e[n]=t[n]&&function(e){return new Promise((function(r,i){!function(t,e,n,r){Promise.resolve(r).then((function(e){t({value:e,done:n})}),e)}(r,i,(e=t[n](e)).done,e.value)}))}}}(t),o.label=1;case 1:return[4,n.next()];case 2:if((r=o.sent()).done)return[3,4];if(a=r.value,e.next(a),e.closed)return[2];o.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return s=o.sent(),i={error:s},[3,11];case 6:return o.trys.push([6,,9,10]),r&&!r.done&&(u=n.return)?[4,u.call(n)]:[3,8];case 7:o.sent(),o.label=8;case 8:return[3,10];case 9:if(i)throw i.error;return[7];case 10:return[7];case 11:return e.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(t,e){function n(t){try{i(f.next(t))}catch(t){e(t)}}function r(t){try{i(f.throw(t))}catch(t){e(t)}}function i(e){var i;e.done?t(e.value):(i=e.value,i instanceof l?i:new l((function(t){t(i)}))).then(n,r)}i((f=f.apply(a,s||[])).next())}))})(t,e).catch((function(t){return e.error(t)}))}))}function $(t){return function(e){if(function(t){return d(null==t?void 0:t.lift)}(e))return e.lift((function(e){try{return t(e,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}function tt(t,e,n,r,i){return new et(t,e,n,r,i)}var et=function(t){function e(e,n,r,i,o,c){var u=t.call(this,e)||this;return u.onFinalize=o,u.shouldUnsubscribe=c,u._next=n?function(t){try{n(t)}catch(t){e.error(t)}}:t.prototype._next,u._error=i?function(t){try{i(t)}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._error,u._complete=r?function(){try{r()}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,u}return i(e,t),e.prototype.unsubscribe=function(){var e;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;t.prototype.unsubscribe.call(this),!n&&(null===(e=this.onFinalize)||void 0===e||e.call(this))}},e}(P);function nt(t,e){return $((function(n,r){var i=0;n.subscribe(tt(r,(function(n){r.next(t.call(e,n,i++))})))}))}function rt(t,e,n){return void 0===n&&(n=1/0),d(e)?rt((function(n,r){return nt((function(t,i){return e(n,t,r,i)}))(X(t(n,r)))}),n):("number"==typeof e&&(n=e),$((function(e,r){return function(t,e,n,r,i,o,c,u){var a=[],s=0,l=0,f=!1,d=function(){!f||a.length||s||e.complete()},h=function(t){return s<r?p(t):a.push(t)},p=function(t){s++;var i=!1;X(n(t,l++)).subscribe(tt(e,(function(t){e.next(t)}),(function(){i=!0}),void 0,(function(){if(i)try{s--;for(;a.length&&s<r;)t=void 0,t=a.shift(),p(t);d()}catch(t){e.error(t)}var t})))};return t.subscribe(tt(e,h,(function(){f=!0,d()}))),function(){}}(e,r,t,n)})))}var it=Array.isArray;var ot=["addListener","removeListener"],ct=["addEventListener","removeEventListener"],ut=["on","off"];function at(t,e,n,r){if(d(n)&&(r=n,n=void 0),r)return at(t,e,n).pipe((i=r,nt((function(t){return function(t,e){return it(e)?t.apply(void 0,a([],u(e))):t(e)}(i,t)}))));var i,o=u(function(t){return d(t.addEventListener)&&d(t.removeEventListener)}(t)?ct.map((function(r){return function(i){return t[r](e,i,n)}})):function(t){return d(t.addListener)&&d(t.removeListener)}(t)?ot.map(st(t,e)):function(t){return d(t.on)&&d(t.off)}(t)?ut.map(st(t,e)):[],2),c=o[0],s=o[1];if(!c&&f(t))return rt((function(t){return at(t,e,n)}))(X(t));if(!c)throw new TypeError("Invalid event target");return new R((function(t){var e=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return t.next(1<e.length?e:e[0])};return c(e),function(){return s(e)}}))}function st(t,e){return function(n){return function(r){return t[n](e,r)}}}var lt=function(t){function e(e,n){return t.call(this)||this}return i(e,t),e.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},e}(b),ft={setInterval:function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i=ft.delegate;return(null==i?void 0:i.setInterval)?i.setInterval.apply(i,a([t,e],u(n))):setInterval.apply(void 0,a([t,e],u(n)))},clearInterval:function(t){var e=ft.delegate;return((null==e?void 0:e.clearInterval)||clearInterval)(t)},delegate:void 0},dt=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return i(e,t),e.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(r,this.id,e),this},e.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),ft.setInterval(t.flush.bind(t,this),n)},e.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!=n&&this.delay===n&&!1===this.pending)return e;ft.clearInterval(e)},e.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,e){var n,r=!1;try{this.work(t)}catch(t){r=!0,n=t||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),n},e.prototype.unsubscribe=function(){if(!this.closed){var e=this.id,n=this.scheduler,r=n.actions;this.work=this.state=this.scheduler=null,this.pending=!1,y(r,this),null!=e&&(this.id=this.recycleAsyncId(n,e,null)),this.delay=null,t.prototype.unsubscribe.call(this)}},e}(lt),ht={now:function(){return(ht.delegate||Date).now()},delegate:void 0},pt=function(){function t(e,n){void 0===n&&(n=t.now),this.schedulerActionCtor=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.schedulerActionCtor(this,t).schedule(n,e)},t.now=ht.now,t}(),vt=new(function(t){function e(e,n){void 0===n&&(n=pt.now);var r=t.call(this,e,n)||this;return r.actions=[],r._active=!1,r._scheduled=void 0,r}return i(e,t),e.prototype.flush=function(t){var e=this.actions;if(this._active)e.push(t);else{var n;this._active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this._active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},e}(pt))(dt);var yt=function(t,e,n,r,i,o){this.parkingHash=void 0,this.timeOccupied=void 0,this.zone=void 0,this.tariff=void 0,this.penaltyIndex=void 0,this.maxTime=void 0,this.parkingHash=t,this.timeOccupied=e,this.zone=n,this.tariff=r,3===this.zone?(this.penaltyIndex=1,this.maxTime=0):(this.penaltyIndex=i,this.maxTime=o)};function bt(t){var e,r,i;at(t,"input").pipe((500,void 0===i&&(i=vt),$((function(t,e){var n=null,r=null,o=null,c=function(){if(n){n.unsubscribe(),n=null;var t=r;r=null,e.next(t)}};function u(){var t=o+500,r=i.now();if(r<t)return n=this.schedule(void 0,t-r),void e.add(n);c()}t.subscribe(tt(e,(function(t){r=t,o=i.now(),n||(n=i.schedule(u,500),e.add(n))}),(function(){c(),e.complete()}),void 0,(function(){r=n=null})))}))),nt((function(t){return t.target.value})),(r=function(t){return 9==t.length},$((function(t,e){var n=0;t.subscribe(tt(e,(function(t){return r.call(undefined,t,n++)&&e.next(t)})))}))),(e=function(t){return e=t,n="".concat("http://localhost:3000","/parkings/?id=").concat(e),function(t,e){return X(t)}(fetch(n).then((function(t){if(t.ok)return t.json();throw new Error("Parking not found")})).catch((function(t){return console.log("Parking spot not found")})));var e,n},$((function(t,n){var r=null,i=!1,o=function(){return i&&!r&&n.complete()};t.subscribe(tt(n,(function(t){null==r||r.unsubscribe();0;X(e(t)).subscribe(r=tt(n,(function(t){return n.next(t)}),(function(){r=null,o()})))}),(function(){i=!0,o()})))})))).subscribe((function(t){if(!0===t[0].occupied){var e=n();e.parked=!0,e.parkingSpot=new yt(t[0].parkingHash,t[0].timeOccupied,t[0].zone,t[0].tariff,t[0].penaltyIndex,t[0].maxTime),xt()}else alert("This is not your parking spot.")}))}var mt=n();function wt(t){mt.currentTab!==t&&(document.getElementById(mt.currentTab).classList.remove("selectedTab"),document.getElementById(t).classList.add("selectedTab"),mt.currentTab=t,"finder-tab"===mt.currentTab?gt():xt())}function gt(){var t=document.getElementsByClassName("contentDiv")[0];t.childNodes.forEach((function(e){t.removeChild(e)}))}function xt(){var t=document.getElementsByClassName("contentDiv")[0];t.childNodes.forEach((function(e){t.removeChild(e)}));var e=document.createElement("div");if(e.classList.add("parkingSpotBox"),mt.parked&&e.classList.add("parkingSpotBoxAddition"),t.appendChild(e),mt.parked){var r=document.createElement("div");r.classList.add("infoBox"),(c=document.createElement("label")).setAttribute("id","timeSpentLabel"),c.classList.add("infoLabel"),r.appendChild(c),(c=document.createElement("label")).setAttribute("id","priceLabel"),c.classList.add("infoLabel"),r.appendChild(c),e.appendChild(r);var i=document.createElement("button");i.innerHTML="Pay",e.appendChild(i);var o=function(){var t=n(),e=new Date,r=360*e.getHours(),i=60*e.getMinutes(),o=e.getSeconds()+r+i,c=t.parkingSpot.timeOccupied.split(":",3),u=o-360*parseInt(c[0])-60*parseInt(c[1])-parseInt(c[2])-1;return R.create((function(){setInterval((function(){var e=void 0,n=!1;u++,e[0]="".concat(u/360,":").concat(u%360/60,":").concat(u%360%60);var r=t.parkingSpot.tariff;return t.parkingSpot.zone<3&&360*t.parkingSpot.maxTime>u&&(r*=t.parkingSpot.penaltyIndex,n=!0),e[1]=.5*r*u,e[2]=n,e}),1e3)})).subscribe((function(t){var e,n,r,i,o;n=(e=t)[0],r=e[1],i=document.getElementById("timeSpentLabel"),o=document.getElementById("priceLabel"),e[2]&&(i.classList.add("infoLabelPenalty"),o.classList.add("infoLabelPenalty")),i.innerHTML="".concat("Duration: ").concat(n),o.innerHTML="".concat(r," ").concat("RSD")}))}();i.addEventListener("click",(function(t){o.unsubscribe()}))}else{var c;(c=document.createElement("label")).innerHTML="Enter your code here:",e.appendChild(c);var u=document.createElement("input");u.maxLength=9,e.appendChild(u),bt(u)}}n(),function(t){var e=document.createElement("div");e.classList.add("mainDiv"),t.appendChild(e);var n=document.createElement("div");n.classList.add("footer");var r=document.createElement("p");r.innerHTML="© Powered by Elfak",n.appendChild(r),t.appendChild(n);var i=document.createElement("div");i.classList.add("centerDiv"),e.appendChild(i);var o=document.createElement("div");o.classList.add("optionsDiv"),i.appendChild(o);var c=document.createElement("div");c.classList.add("contentDiv"),i.appendChild(c);var u=document.createElement("div");u.classList.add("tabsDiv"),o.appendChild(u);var a=document.createElement("div");a.classList.add("tab"),a.classList.add("selectedTab"),a.innerHTML="Find parking",a.setAttribute("id","finder-tab"),a.addEventListener("click",(function(t){wt("finder-tab")})),u.appendChild(a),(a=document.createElement("div")).classList.add("tab"),a.innerHTML="Check status",a.setAttribute("id","checker-tab"),a.addEventListener("click",(function(t){wt("checker-tab")})),u.appendChild(a);var s=document.createElement("div");s.classList.add("hrLine"),o.appendChild(s),gt()}(document.body)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,