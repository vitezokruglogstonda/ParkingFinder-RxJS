(()=>{"use strict";var t="http://localhost:3000",n=void 0,e=function(t){this.currentTab=t,this.parked=!1,this.parkingSpot=null};function r(){return void 0===n&&(n=new e("finder-tab")),n}var i=function(t,n){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},i(t,n)};function o(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}i(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}function u(t,n){var e,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(o){return function(c){return function(o){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!((i=(i=u.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=n.call(t,u)}catch(t){o=[6,t],r=0}finally{e=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,c])}}}function c(t){var n="function"==typeof Symbol&&Symbol.iterator,e=n&&t[n],r=0;if(e)return e.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")}function a(t,n){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var r,i,o=e.call(t),u=[];try{for(;(void 0===n||n-- >0)&&!(r=o.next()).done;)u.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(e=o.return)&&e.call(o)}finally{if(i)throw i.error}}return u}function s(t,n,e){if(e||2===arguments.length)for(var r,i=0,o=n.length;i<o;i++)!r&&i in n||(r||(r=Array.prototype.slice.call(n,0,i)),r[i]=n[i]);return t.concat(r||Array.prototype.slice.call(n))}function l(t){return this instanceof l?(this.v=t,this):new l(t)}function f(t,n,e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=e.apply(t,n||[]),o=[];return r={},u("next"),u("throw"),u("return"),r[Symbol.asyncIterator]=function(){return this},r;function u(t){i[t]&&(r[t]=function(n){return new Promise((function(e,r){o.push([t,n,e,r])>1||c(t,n)}))})}function c(t,n){try{(e=i[t](n)).value instanceof l?Promise.resolve(e.value.v).then(a,s):f(o[0][2],e)}catch(t){f(o[0][3],t)}var e}function a(t){c("next",t)}function s(t){c("throw",t)}function f(t,n){t(n),o.shift(),o.length&&c(o[0][0],o[0][1])}}Object.create,Object.create;var d=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function p(t){return"function"==typeof t}function h(t){return p(null==t?void 0:t.then)}var v,y=((v=function(t){return function(n){t(this),this.message=n?n.length+" errors occurred during unsubscription:\n"+n.map((function(t,n){return n+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=n}}((function(t){Error.call(t),t.stack=(new Error).stack}))).prototype=Object.create(Error.prototype),v.prototype.constructor=v,v);function b(t,n){if(t){var e=t.indexOf(n);0<=e&&t.splice(e,1)}}var m=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}var n;return t.prototype.unsubscribe=function(){var t,n,e,r,i;if(!this.closed){this.closed=!0;var o=this._parentage;if(o)if(this._parentage=null,Array.isArray(o))try{for(var u=c(o),l=u.next();!l.done;l=u.next())l.value.remove(this)}catch(n){t={error:n}}finally{try{l&&!l.done&&(n=u.return)&&n.call(u)}finally{if(t)throw t.error}}else o.remove(this);var f=this.initialTeardown;if(p(f))try{f()}catch(t){i=t instanceof y?t.errors:[t]}var d=this._finalizers;if(d){this._finalizers=null;try{for(var h=c(d),v=h.next();!v.done;v=h.next()){var b=v.value;try{g(b)}catch(t){i=null!=i?i:[],t instanceof y?i=s(s([],a(i)),a(t.errors)):i.push(t)}}}catch(t){e={error:t}}finally{try{v&&!v.done&&(r=h.return)&&r.call(h)}finally{if(e)throw e.error}}}if(i)throw new y(i)}},t.prototype.add=function(n){var e;if(n&&n!==this)if(this.closed)g(n);else{if(n instanceof t){if(n.closed||n._hasParent(this))return;n._addParent(this)}(this._finalizers=null!==(e=this._finalizers)&&void 0!==e?e:[]).push(n)}},t.prototype._hasParent=function(t){var n=this._parentage;return n===t||Array.isArray(n)&&n.includes(t)},t.prototype._addParent=function(t){var n=this._parentage;this._parentage=Array.isArray(n)?(n.push(t),n):n?[n,t]:t},t.prototype._removeParent=function(t){var n=this._parentage;n===t?this._parentage=null:Array.isArray(n)&&b(n,t)},t.prototype.remove=function(n){var e=this._finalizers;e&&b(e,n),n instanceof t&&n._removeParent(this)},t.EMPTY=((n=new t).closed=!0,n),t}();function w(t){return t instanceof m||t&&"closed"in t&&p(t.remove)&&p(t.add)&&p(t.unsubscribe)}function g(t){p(t)?t():t.unsubscribe()}m.EMPTY;var x=null,S=null,k=void 0,E=!1,_=!1,T={setTimeout:function(t,n){for(var e=[],r=2;r<arguments.length;r++)e[r-2]=arguments[r];var i=T.delegate;return(null==i?void 0:i.setTimeout)?i.setTimeout.apply(i,s([t,n],a(e))):setTimeout.apply(void 0,s([t,n],a(e)))},clearTimeout:function(t){var n=T.delegate;return((null==n?void 0:n.clearTimeout)||clearTimeout)(t)},delegate:void 0};function L(t){T.setTimeout((function(){if(!x)throw t;x(t)}))}function I(){}var A=C("C",void 0,void 0);function C(t,n,e){return{kind:t,value:n,error:e}}var P=null,O=function(t){function n(n){var e=t.call(this)||this;return e.isStopped=!1,n?(e.destination=n,w(n)&&n.add(e)):e.destination=Y,e}return o(n,t),n.create=function(t,n,e){return new D(t,n,e)},n.prototype.next=function(t){this.isStopped?B(function(t){return C("N",t,void 0)}(t),this):this._next(t)},n.prototype.error=function(t){this.isStopped?B(C("E",void 0,t),this):(this.isStopped=!0,this._error(t))},n.prototype.complete=function(){this.isStopped?B(A,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(t){this.destination.next(t)},n.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}(m),z=Function.prototype.bind;function j(t,n){return z.call(t,n)}var H=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var n=this.partialObserver;if(n.next)try{n.next(t)}catch(t){M(t)}},t.prototype.error=function(t){var n=this.partialObserver;if(n.error)try{n.error(t)}catch(t){M(t)}else M(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){M(t)}},t}(),D=function(t){function n(n,e,r){var i,o,u=t.call(this)||this;return p(n)||!n?i={next:null!=n?n:void 0,error:null!=e?e:void 0,complete:null!=r?r:void 0}:u&&_?((o=Object.create(n)).unsubscribe=function(){return u.unsubscribe()},i={next:n.next&&j(n.next,o),error:n.error&&j(n.error,o),complete:n.complete&&j(n.complete,o)}):i=n,u.destination=new H(i),u}return o(n,t),n}(O);function M(t){var n;E?(n=t,E&&P&&(P.errorThrown=!0,P.error=n)):L(t)}function B(t,n){var e=S;e&&T.setTimeout((function(){return e(t,n)}))}var Y={closed:!0,next:I,error:function(t){throw t},complete:I},N="function"==typeof Symbol&&Symbol.observable||"@@observable";function U(t){return t}function X(t){return 0===t.length?U:1===t.length?t[0]:function(n){return t.reduce((function(t,n){return n(t)}),n)}}var F=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(n){var e=new t;return e.source=this,e.operator=n,e},t.prototype.subscribe=function(t,n,e){var r,i=this,o=(r=t)&&r instanceof O||function(t){return t&&p(t.next)&&p(t.error)&&p(t.complete)}(r)&&w(r)?t:new D(t,n,e);return function(t){if(E){var n=!P;if(n&&(P={errorThrown:!1,error:null}),t(),n){var e=P,r=e.errorThrown,i=e.error;if(P=null,r)throw i}}else t()}((function(){var t=i,n=t.operator,e=t.source;o.add(n?n.call(o,e):e?i._subscribe(o):i._trySubscribe(o))})),o},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(n){t.error(n)}},t.prototype.forEach=function(t,n){var e=this;return new(n=R(n))((function(n,r){var i=new D({next:function(n){try{t(n)}catch(t){r(t),i.unsubscribe()}},error:r,complete:n});e.subscribe(i)}))},t.prototype._subscribe=function(t){var n;return null===(n=this.source)||void 0===n?void 0:n.subscribe(t)},t.prototype[N]=function(){return this},t.prototype.pipe=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return X(t)(this)},t.prototype.toPromise=function(t){var n=this;return new(t=R(t))((function(t,e){var r;n.subscribe((function(t){return r=t}),(function(t){return e(t)}),(function(){return t(r)}))}))},t.create=function(n){return new t(n)},t}();function R(t){var n;return null!==(n=null!=t?t:k)&&void 0!==n?n:Promise}function q(t){return p(t[N])}function G(t){return Symbol.asyncIterator&&p(null==t?void 0:t[Symbol.asyncIterator])}function J(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var K="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function Q(t){return p(null==t?void 0:t[K])}function V(t){return f(this,arguments,(function(){var n,e,r;return u(this,(function(i){switch(i.label){case 0:n=t.getReader(),i.label=1;case 1:i.trys.push([1,,9,10]),i.label=2;case 2:return[4,l(n.read())];case 3:return e=i.sent(),r=e.value,e.done?[4,l(void 0)]:[3,5];case 4:return[2,i.sent()];case 5:return[4,l(r)];case 6:return[4,i.sent()];case 7:return i.sent(),[3,2];case 8:return[3,10];case 9:return n.releaseLock(),[7];case 10:return[2]}}))}))}function W(t){return p(null==t?void 0:t.getReader)}function Z(t){if(t instanceof F)return t;if(null!=t){if(q(t))return i=t,new F((function(t){var n=i[N]();if(p(n.subscribe))return n.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(d(t))return r=t,new F((function(t){for(var n=0;n<r.length&&!t.closed;n++)t.next(r[n]);t.complete()}));if(h(t))return e=t,new F((function(t){e.then((function(n){t.closed||(t.next(n),t.complete())}),(function(n){return t.error(n)})).then(null,L)}));if(G(t))return $(t);if(Q(t))return n=t,new F((function(t){var e,r;try{for(var i=c(n),o=i.next();!o.done;o=i.next()){var u=o.value;if(t.next(u),t.closed)return}}catch(t){e={error:t}}finally{try{o&&!o.done&&(r=i.return)&&r.call(i)}finally{if(e)throw e.error}}t.complete()}));if(W(t))return $(V(t))}var n,e,r,i;throw J(t)}function $(t){return new F((function(n){(function(t,n){var e,r,i,o,a,s,l,f;return a=this,s=void 0,f=function(){var a,s;return u(this,(function(u){switch(u.label){case 0:u.trys.push([0,5,6,11]),e=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,e=t[Symbol.asyncIterator];return e?e.call(t):(t=c(t),n={},r("next"),r("throw"),r("return"),n[Symbol.asyncIterator]=function(){return this},n);function r(e){n[e]=t[e]&&function(n){return new Promise((function(r,i){!function(t,n,e,r){Promise.resolve(r).then((function(n){t({value:n,done:e})}),n)}(r,i,(n=t[e](n)).done,n.value)}))}}}(t),u.label=1;case 1:return[4,e.next()];case 2:if((r=u.sent()).done)return[3,4];if(a=r.value,n.next(a),n.closed)return[2];u.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return s=u.sent(),i={error:s},[3,11];case 6:return u.trys.push([6,,9,10]),r&&!r.done&&(o=e.return)?[4,o.call(e)]:[3,8];case 7:u.sent(),u.label=8;case 8:return[3,10];case 9:if(i)throw i.error;return[7];case 10:return[7];case 11:return n.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(t,n){function e(t){try{i(f.next(t))}catch(t){n(t)}}function r(t){try{i(f.throw(t))}catch(t){n(t)}}function i(n){var i;n.done?t(n.value):(i=n.value,i instanceof l?i:new l((function(t){t(i)}))).then(e,r)}i((f=f.apply(a,s||[])).next())}))})(t,n).catch((function(t){return n.error(t)}))}))}function tt(t){return function(n){if(function(t){return p(null==t?void 0:t.lift)}(n))return n.lift((function(n){try{return t(n,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}function nt(t,n,e,r,i){return new et(t,n,e,r,i)}var et=function(t){function n(n,e,r,i,o,u){var c=t.call(this,n)||this;return c.onFinalize=o,c.shouldUnsubscribe=u,c._next=e?function(t){try{e(t)}catch(t){n.error(t)}}:t.prototype._next,c._error=i?function(t){try{i(t)}catch(t){n.error(t)}finally{this.unsubscribe()}}:t.prototype._error,c._complete=r?function(){try{r()}catch(t){n.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,c}return o(n,t),n.prototype.unsubscribe=function(){var n;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var e=this.closed;t.prototype.unsubscribe.call(this),!e&&(null===(n=this.onFinalize)||void 0===n||n.call(this))}},n}(O);function rt(t,n){return tt((function(e,r){var i=0;e.subscribe(nt(r,(function(e){r.next(t.call(n,e,i++))})))}))}function it(t,n,e,r,i){void 0===r&&(r=0),void 0===i&&(i=!1);var o=n.schedule((function(){e(),i?t.add(this.schedule(null,r)):this.unsubscribe()}),r);if(t.add(o),!i)return o}function ot(t,n,e){return void 0===e&&(e=1/0),p(n)?ot((function(e,r){return rt((function(t,i){return n(e,t,r,i)}))(Z(t(e,r)))}),e):("number"==typeof n&&(e=n),tt((function(n,r){return function(t,n,e,r,i,o,u,c){var a=[],s=0,l=0,f=!1,d=function(){!f||a.length||s||n.complete()},p=function(t){return s<r?h(t):a.push(t)},h=function(t){s++;var i=!1;Z(e(t,l++)).subscribe(nt(n,(function(t){n.next(t)}),(function(){i=!0}),void 0,(function(){if(i)try{s--;for(;a.length&&s<r;)t=void 0,t=a.shift(),h(t);d()}catch(t){n.error(t)}var t})))};return t.subscribe(nt(n,p,(function(){f=!0,d()}))),function(){}}(n,r,t,e)})))}var ut=Array.isArray;var ct=["addListener","removeListener"],at=["addEventListener","removeEventListener"],st=["on","off"];function lt(t,n,e,r){if(p(e)&&(r=e,e=void 0),r)return lt(t,n,e).pipe((i=r,rt((function(t){return function(t,n){return ut(n)?t.apply(void 0,s([],a(n))):t(n)}(i,t)}))));var i,o=a(function(t){return p(t.addEventListener)&&p(t.removeEventListener)}(t)?at.map((function(r){return function(i){return t[r](n,i,e)}})):function(t){return p(t.addListener)&&p(t.removeListener)}(t)?ct.map(ft(t,n)):function(t){return p(t.on)&&p(t.off)}(t)?st.map(ft(t,n)):[],2),u=o[0],c=o[1];if(!u&&d(t))return ot((function(t){return lt(t,n,e)}))(Z(t));if(!u)throw new TypeError("Invalid event target");return new F((function(t){var n=function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];return t.next(1<n.length?n:n[0])};return u(n),function(){return c(n)}}))}function ft(t,n){return function(e){return function(r){return t[e](n,r)}}}var dt=function(t){function n(n,e){return t.call(this)||this}return o(n,t),n.prototype.schedule=function(t,n){return void 0===n&&(n=0),this},n}(m),pt={setInterval:function(t,n){for(var e=[],r=2;r<arguments.length;r++)e[r-2]=arguments[r];var i=pt.delegate;return(null==i?void 0:i.setInterval)?i.setInterval.apply(i,s([t,n],a(e))):setInterval.apply(void 0,s([t,n],a(e)))},clearInterval:function(t){var n=pt.delegate;return((null==n?void 0:n.clearInterval)||clearInterval)(t)},delegate:void 0},ht=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.scheduler=n,r.work=e,r.pending=!1,r}return o(n,t),n.prototype.schedule=function(t,n){if(void 0===n&&(n=0),this.closed)return this;this.state=t;var e=this.id,r=this.scheduler;return null!=e&&(this.id=this.recycleAsyncId(r,e,n)),this.pending=!0,this.delay=n,this.id=this.id||this.requestAsyncId(r,this.id,n),this},n.prototype.requestAsyncId=function(t,n,e){return void 0===e&&(e=0),pt.setInterval(t.flush.bind(t,this),e)},n.prototype.recycleAsyncId=function(t,n,e){if(void 0===e&&(e=0),null!=e&&this.delay===e&&!1===this.pending)return n;pt.clearInterval(n)},n.prototype.execute=function(t,n){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var e=this._execute(t,n);if(e)return e;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},n.prototype._execute=function(t,n){var e,r=!1;try{this.work(t)}catch(t){r=!0,e=t||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),e},n.prototype.unsubscribe=function(){if(!this.closed){var n=this.id,e=this.scheduler,r=e.actions;this.work=this.state=this.scheduler=null,this.pending=!1,b(r,this),null!=n&&(this.id=this.recycleAsyncId(e,n,null)),this.delay=null,t.prototype.unsubscribe.call(this)}},n}(dt),vt={now:function(){return(vt.delegate||Date).now()},delegate:void 0},yt=function(){function t(n,e){void 0===e&&(e=t.now),this.schedulerActionCtor=n,this.now=e}return t.prototype.schedule=function(t,n,e){return void 0===n&&(n=0),new this.schedulerActionCtor(this,t).schedule(e,n)},t.now=vt.now,t}(),bt=new(function(t){function n(n,e){void 0===e&&(e=yt.now);var r=t.call(this,n,e)||this;return r.actions=[],r._active=!1,r._scheduled=void 0,r}return o(n,t),n.prototype.flush=function(t){var n=this.actions;if(this._active)n.push(t);else{var e;this._active=!0;do{if(e=t.execute(t.state,t.delay))break}while(t=n.shift());if(this._active=!1,e){for(;t=n.shift();)t.unsubscribe();throw e}}},n}(yt))(ht),mt=bt;function wt(t,n){return void 0===n&&(n=0),tt((function(e,r){e.subscribe(nt(r,(function(e){return it(r,t,(function(){return r.next(e)}),n)}),(function(){return it(r,t,(function(){return r.complete()}),n)}),(function(e){return it(r,t,(function(){return r.error(e)}),n)})))}))}function gt(t,n){return void 0===n&&(n=0),tt((function(e,r){r.add(t.schedule((function(){return e.subscribe(r)}),n))}))}function xt(t,n){if(!t)throw new Error("Iterable cannot be null");return new F((function(e){it(e,n,(function(){var r=t[Symbol.asyncIterator]();it(e,n,(function(){r.next().then((function(t){t.done?e.complete():e.next(t.value)}))}),0,!0)}))}))}function St(t,n){return n?function(t,n){if(null!=t){if(q(t))return function(t,n){return Z(t).pipe(gt(n),wt(n))}(t,n);if(d(t))return function(t,n){return new F((function(e){var r=0;return n.schedule((function(){r===t.length?e.complete():(e.next(t[r++]),e.closed||this.schedule())}))}))}(t,n);if(h(t))return function(t,n){return Z(t).pipe(gt(n),wt(n))}(t,n);if(G(t))return xt(t,n);if(Q(t))return function(t,n){return new F((function(e){var r;return it(e,n,(function(){r=t[K](),it(e,n,(function(){var t,n,i;try{n=(t=r.next()).value,i=t.done}catch(t){return void e.error(t)}i?e.complete():e.next(n)}),0,!0)})),function(){return p(null==r?void 0:r.return)&&r.return()}}))}(t,n);if(W(t))return function(t,n){return xt(V(t),n)}(t,n)}throw J(t)}(t,n):Z(t)}var kt=function(t,n,e,r,i,o,u,c,a){this.parkingHash=void 0,this.city=void 0,this.timeOccupied=void 0,this.zone=void 0,this.tariff=void 0,this.penaltyIndex=void 0,this.maxTime=void 0,this.locationX=void 0,this.locationY=void 0,this.parkingHash=t,this.timeOccupied=n,this.zone=e,this.tariff=r,3===this.zone?(this.penaltyIndex=1,this.maxTime=0):(this.penaltyIndex=i,this.maxTime=o),this.city=u,this.locationX=c,this.locationY=a};function Et(){r();var t,n,e=function(){var t=r(),n=new Date,e=360*n.getHours(),i=60*n.getMinutes(),o=n.getSeconds()+e+i,u=t.parkingSpot.timeOccupied.split(":",3);return o-360*parseInt(u[0])-60*parseInt(u[1])-parseInt(u[2])-1}(),i=(t=1e3,void 0===t&&(t=0),void 0===n&&(n=bt),t<0&&(t=0),function(t,n,e){void 0===t&&(t=0),void 0===e&&(e=mt);var r,i=-1;return null!=n&&((r=n)&&p(r.schedule)?e=n:i=n),new F((function(n){var r=function(t){return t instanceof Date&&!isNaN(t)}(t)?+t-e.now():t;r<0&&(r=0);var o=0;return e.schedule((function(){n.closed||(n.next(o++),0<=i?this.schedule(void 0,i):n.complete())}),r)}))}(t,t,n)).pipe(rt((function(t){return function(t,n){var e=r(),i=["",0,!1],o=!1;t+=n,i[0]="".concat(Math.floor(t/360),":").concat(Math.floor(t%360/60),":").concat(t%360%60);var u=e.parkingSpot.tariff;return e.parkingSpot.zone<3&&e.parkingSpot.maxTime>t&&(u*=e.parkingSpot.penaltyIndex,o=!0),i[1]=.5*u*t,i[2]=o,i}(e,t)}))).subscribe((function(t){!function(t){var n=r(),e=t[0];n.price=t[1];var i=document.getElementById("timeSpentLabel"),o=document.getElementById("priceLabel");t[2]&&(i.classList.add("infoLabelPenalty"),o.classList.add("infoLabelPenalty")),i.innerHTML="".concat("Duration: ").concat(e),o.innerHTML="".concat(n.price," ").concat("RSD")}(t)}));return i}var _t=r();function Tt(t){_t.currentTab!==t&&(document.getElementById(_t.currentTab).classList.remove("selectedTab"),document.getElementById(t).classList.add("selectedTab"),_t.currentTab=t,"finder-tab"===_t.currentTab?Lt():It())}function Lt(){var t=document.getElementsByClassName("contentDiv")[0];t.childNodes.forEach((function(n){t.removeChild(n)}))}function It(){var n=document.getElementsByClassName("contentDiv")[0];n.childNodes.forEach((function(t){n.removeChild(t)}));var e,i,o,u=document.createElement("div");if(u.classList.add("parkingSpotBox"),_t.parked&&u.classList.add("parkingSpotBoxAddition"),n.appendChild(u),_t.parked){var c=document.createElement("div");c.classList.add("infoBox"),(l=document.createElement("label")).setAttribute("id","timeSpentLabel"),l.classList.add("infoLabel"),c.appendChild(l),(l=document.createElement("label")).setAttribute("id","priceLabel"),l.classList.add("infoLabel"),c.appendChild(l),u.appendChild(c);var a=document.createElement("button");a.innerHTML="Pay",u.appendChild(a);var s=Et();a.addEventListener("click",(function(n){!function(n){n.unsubscribe(),function(){var n=r(),e="".concat(t,"/parkings/?id=").concat(n.parkingSpot.parkingHash);St(fetch(e,{method:"PUT",headers:{"Content-type":"application/json"},body:JSON.stringify({id:n.parkingSpot.parkingHash,city:n.parkingSpot.city,zone:n.parkingSpot.zone,tariff:n.parkingSpot.tariff,penaltyIndex:n.parkingSpot.penaltyIndex,maxTime:n.parkingSpot.maxTime,locationX:n.parkingSpot.locationX,locationY:n.parkingSpot.locationY,occupied:!1,timeOccupied:null})}))}();var e=r(),i="Parking time ended, your vehicle is on the way. Thank you for using our services.\nEstimated price: "+e.price;alert(i),e.parked=!1,It()}(s)}))}else{var l;(l=document.createElement("label")).innerHTML="Enter your code here:",u.appendChild(l);var f=document.createElement("input");f.maxLength=9,u.appendChild(f),lt(f,"input").pipe((void 0===o&&(o=bt),tt((function(t,n){var e=null,r=null,i=null,u=function(){if(e){e.unsubscribe(),e=null;var t=r;r=null,n.next(t)}};function c(){var t=i+500,r=o.now();if(r<t)return e=this.schedule(void 0,t-r),void n.add(e);u()}t.subscribe(nt(n,(function(t){r=t,i=o.now(),e||(e=o.schedule(c,500),n.add(e))}),(function(){u(),n.complete()}),void 0,(function(){r=e=null})))}))),rt((function(t){return t.target.value})),(i=function(t){return 9==t.length},tt((function(t,n){var e=0;t.subscribe(nt(n,(function(t){return i.call(void 0,t,e++)&&n.next(t)})))}))),(e=function(n){return e=n,r="".concat(t,"/parkings/?id=").concat(e),St(fetch(r).then((function(t){if(t.ok)return t.json();throw new Error("Parking not found")})).catch((function(t){return console.log("Parking spot not found")})));var e,r},tt((function(t,n){var r=null,i=!1,o=function(){return i&&!r&&n.complete()};t.subscribe(nt(n,(function(t){null==r||r.unsubscribe(),Z(e(t)).subscribe(r=nt(n,(function(t){return n.next(t)}),(function(){r=null,o()})))}),(function(){i=!0,o()})))})))).subscribe((function(t){if(!0===t[0].occupied){var n=r();n.parked=!0,n.parkingSpot=new kt(t[0].parkingHash,t[0].timeOccupied,t[0].zone,t[0].tariff,t[0].penaltyIndex,t[0].maxTime,t[0].city,t[0].locationX,t[0].locationY),It()}else alert("This is not your parking spot.")}))}}r(),function(t){var n=document.createElement("div");n.classList.add("mainDiv"),t.appendChild(n);var e=document.createElement("div");e.classList.add("footer");var r=document.createElement("p");r.innerHTML="© Powered by Elfak",e.appendChild(r),t.appendChild(e);var i=document.createElement("div");i.classList.add("centerDiv"),n.appendChild(i);var o=document.createElement("div");o.classList.add("optionsDiv"),i.appendChild(o);var u=document.createElement("div");u.classList.add("contentDiv"),i.appendChild(u);var c=document.createElement("div");c.classList.add("tabsDiv"),o.appendChild(c);var a=document.createElement("div");a.classList.add("tab"),a.classList.add("selectedTab"),a.innerHTML="Find parking",a.setAttribute("id","finder-tab"),a.addEventListener("click",(function(t){Tt("finder-tab")})),c.appendChild(a),(a=document.createElement("div")).classList.add("tab"),a.innerHTML="Check status",a.setAttribute("id","checker-tab"),a.addEventListener("click",(function(t){Tt("checker-tab")})),c.appendChild(a);var s=document.createElement("div");s.classList.add("hrLine"),o.appendChild(s),Lt()}(document.body)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,